
ATmega32_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  0000094a  000009be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000094a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000005c  00000000  00000000  000009f6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a54  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  00000a94  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e81  00000000  00000000  00000b44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000977  00000000  00000000  000019c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000795  00000000  00000000  0000233c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000134  00000000  00000000  00002ad4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004bc  00000000  00000000  00002c08  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000054e  00000000  00000000  000030c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00003612  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e4       	ldi	r30, 0x4A	; 74
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 33       	cpi	r26, 0x38	; 56
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  8e:	0c 94 a3 04 	jmp	0x946	; 0x946 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <initLED>:
#define LED_PIN PB0 // Utilisez la broche PB0 pour la LED (personnalisez selon votre configuration matérielle)


void initLED() {
	// Configure la broche de la LED comme sortie
	DDRB |= (1 << LED_PIN);
  96:	20 9a       	sbi	0x04, 0	; 4
  98:	08 95       	ret

0000009a <turnOnLED>:
}

void turnOnLED() {
	// Allume la LED en mettant la broche à l'état bas (0)
	PORTB &= ~(1 << LED_PIN);
  9a:	28 98       	cbi	0x05, 0	; 5
  9c:	08 95       	ret

0000009e <turnOffLED>:
}

void turnOffLED() {
	// Éteint la LED en mettant la broche à l'état haut (1)
	PORTB |= (1 << LED_PIN);
  9e:	28 9a       	sbi	0x05, 0	; 5
  a0:	08 95       	ret

000000a2 <main>:
}


int main(void)
{
  a2:	cf 93       	push	r28
  a4:	df 93       	push	r29
  a6:	cd b7       	in	r28, 0x3d	; 61
  a8:	de b7       	in	r29, 0x3e	; 62
  aa:	2a 97       	sbiw	r28, 0x0a	; 10
  ac:	0f b6       	in	r0, 0x3f	; 63
  ae:	f8 94       	cli
  b0:	de bf       	out	0x3e, r29	; 62
  b2:	0f be       	out	0x3f, r0	; 63
  b4:	cd bf       	out	0x3d, r28	; 61
	char buffer[10];
	int8_t count = 0;
	
	LCD_Init();
  b6:	0e 94 77 01 	call	0x2ee	; 0x2ee <LCD_Init>
	I2C_Slave_Init(Slave_Address);
  ba:	80 e2       	ldi	r24, 0x20	; 32
  bc:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <I2C_Slave_Init>
	initLED(); // Initialise la LED
  c0:	0e 94 4b 00 	call	0x96	; 0x96 <initLED>

    // Activer les interruptions
    sei();
  c4:	78 94       	sei
	
	LCD_String_xy(1, 0, "Slave Device");
  c6:	40 e0       	ldi	r20, 0x00	; 0
  c8:	51 e0       	ldi	r21, 0x01	; 1
  ca:	60 e0       	ldi	r22, 0x00	; 0
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	0e 94 a1 01 	call	0x342	; 0x342 <LCD_String_xy>


int main(void)
{
	char buffer[10];
	int8_t count = 0;
  d2:	10 e0       	ldi	r17, 0x00	; 0
			case 0:
			{
				LCD_String_xy(2, 0, "Receiving :       ");
				do
				{
					sprintf(buffer, "%d    ", count);
  d4:	0f 2e       	mov	r0, r31
  d6:	f0 e2       	ldi	r31, 0x20	; 32
  d8:	ef 2e       	mov	r14, r31
  da:	f1 e0       	ldi	r31, 0x01	; 1
  dc:	ff 2e       	mov	r15, r31
  de:	f0 2d       	mov	r31, r0
  e0:	ce 01       	movw	r24, r28
  e2:	01 96       	adiw	r24, 0x01	; 1
  e4:	6c 01       	movw	r12, r24
  e6:	b8 2e       	mov	r11, r24
  e8:	0d 2d       	mov	r16, r13
	
	LCD_String_xy(1, 0, "Slave Device");
	
	while (1)
	{
		switch(I2C_Slave_Listen())				/* Check for any SLA+W or SLA+R */
  ea:	0e 94 ef 00 	call	0x1de	; 0x1de <I2C_Slave_Listen>
  ee:	88 23       	and	r24, r24
  f0:	19 f0       	breq	.+6      	; 0xf8 <main+0x56>
  f2:	81 30       	cpi	r24, 0x01	; 1
  f4:	e1 f1       	breq	.+120    	; 0x16e <main+0xcc>
  f6:	61 c0       	rjmp	.+194    	; 0x1ba <main+0x118>
		{
			case 0:
			{
				LCD_String_xy(2, 0, "Receiving :       ");
  f8:	4d e0       	ldi	r20, 0x0D	; 13
  fa:	51 e0       	ldi	r21, 0x01	; 1
  fc:	60 e0       	ldi	r22, 0x00	; 0
  fe:	82 e0       	ldi	r24, 0x02	; 2
 100:	0e 94 a1 01 	call	0x342	; 0x342 <LCD_String_xy>
				do
				{
					sprintf(buffer, "%d    ", count);
 104:	81 2f       	mov	r24, r17
 106:	01 2e       	mov	r0, r17
 108:	00 0c       	add	r0, r0
 10a:	99 0b       	sbc	r25, r25
 10c:	9f 93       	push	r25
 10e:	1f 93       	push	r17
 110:	ff 92       	push	r15
 112:	ef 92       	push	r14
 114:	df 92       	push	r13
 116:	cf 92       	push	r12
 118:	0e 94 b9 01 	call	0x372	; 0x372 <sprintf>
					LCD_String_xy(2, 13, buffer);
 11c:	4b 2d       	mov	r20, r11
 11e:	50 2f       	mov	r21, r16
 120:	6d e0       	ldi	r22, 0x0D	; 13
 122:	82 e0       	ldi	r24, 0x02	; 2
 124:	0e 94 a1 01 	call	0x342	; 0x342 <LCD_String_xy>
					count = I2C_Slave_Receive();/* Receive data byte*/
 128:	0e 94 33 01 	call	0x266	; 0x266 <I2C_Slave_Receive>
 12c:	18 2f       	mov	r17, r24
				} while (count != -1);			/* Receive until STOP/REPEATED START received */
 12e:	0f 90       	pop	r0
 130:	0f 90       	pop	r0
 132:	0f 90       	pop	r0
 134:	0f 90       	pop	r0
 136:	0f 90       	pop	r0
 138:	0f 90       	pop	r0
 13a:	8f 3f       	cpi	r24, 0xFF	; 255
 13c:	19 f7       	brne	.-58     	; 0x104 <main+0x62>
				
				// Allume la LED lors de la réception des données
				turnOnLED();
 13e:	0e 94 4d 00 	call	0x9a	; 0x9a <turnOnLED>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 142:	9f ef       	ldi	r25, 0xFF	; 255
 144:	20 e7       	ldi	r18, 0x70	; 112
 146:	82 e0       	ldi	r24, 0x02	; 2
 148:	91 50       	subi	r25, 0x01	; 1
 14a:	20 40       	sbci	r18, 0x00	; 0
 14c:	80 40       	sbci	r24, 0x00	; 0
 14e:	e1 f7       	brne	.-8      	; 0x148 <main+0xa6>
 150:	00 c0       	rjmp	.+0      	; 0x152 <main+0xb0>
 152:	00 00       	nop
				_delay_ms(100);
				turnOffLED();
 154:	0e 94 4f 00 	call	0x9e	; 0x9e <turnOffLED>
 158:	9f ef       	ldi	r25, 0xFF	; 255
 15a:	29 e6       	ldi	r18, 0x69	; 105
 15c:	88 e1       	ldi	r24, 0x18	; 24
 15e:	91 50       	subi	r25, 0x01	; 1
 160:	20 40       	sbci	r18, 0x00	; 0
 162:	80 40       	sbci	r24, 0x00	; 0
 164:	e1 f7       	brne	.-8      	; 0x15e <main+0xbc>
 166:	00 c0       	rjmp	.+0      	; 0x168 <main+0xc6>
 168:	00 00       	nop
				_delay_ms(1000);
				
				count = 0;
 16a:	10 e0       	ldi	r17, 0x00	; 0
				break;
 16c:	be cf       	rjmp	.-132    	; 0xea <main+0x48>
			}
			case 1:
			{
				int8_t Ack_status;
				LCD_String_xy(2, 0, "Sending :       ");
 16e:	47 e2       	ldi	r20, 0x27	; 39
 170:	51 e0       	ldi	r21, 0x01	; 1
 172:	60 e0       	ldi	r22, 0x00	; 0
 174:	82 e0       	ldi	r24, 0x02	; 2
 176:	0e 94 a1 01 	call	0x342	; 0x342 <LCD_String_xy>
				do
				{
					Ack_status = I2C_Slave_Transmit(count);	/* Send data byte */
 17a:	81 2f       	mov	r24, r17
 17c:	0e 94 0a 01 	call	0x214	; 0x214 <I2C_Slave_Transmit>
 180:	a8 2e       	mov	r10, r24
					sprintf(buffer, "%d    ",count);
 182:	81 2f       	mov	r24, r17
 184:	01 2e       	mov	r0, r17
 186:	00 0c       	add	r0, r0
 188:	99 0b       	sbc	r25, r25
 18a:	9f 93       	push	r25
 18c:	1f 93       	push	r17
 18e:	ff 92       	push	r15
 190:	ef 92       	push	r14
 192:	df 92       	push	r13
 194:	cf 92       	push	r12
 196:	0e 94 b9 01 	call	0x372	; 0x372 <sprintf>
					LCD_String_xy(2, 13, buffer);
 19a:	4b 2d       	mov	r20, r11
 19c:	50 2f       	mov	r21, r16
 19e:	6d e0       	ldi	r22, 0x0D	; 13
 1a0:	82 e0       	ldi	r24, 0x02	; 2
 1a2:	0e 94 a1 01 	call	0x342	; 0x342 <LCD_String_xy>
 1a6:	1f 5f       	subi	r17, 0xFF	; 255
					count++;
				} while (Ack_status == 0);		/* Send until Acknowledgment is received */
 1a8:	0f 90       	pop	r0
 1aa:	0f 90       	pop	r0
 1ac:	0f 90       	pop	r0
 1ae:	0f 90       	pop	r0
 1b0:	0f 90       	pop	r0
 1b2:	0f 90       	pop	r0
 1b4:	aa 20       	and	r10, r10
 1b6:	09 f3       	breq	.-62     	; 0x17a <main+0xd8>
 1b8:	98 cf       	rjmp	.-208    	; 0xea <main+0x48>
				break;
			}
			default:
				// Aucune donnée reçue, éteignez la LED
				turnOffLED();
 1ba:	0e 94 4f 00 	call	0x9e	; 0x9e <turnOffLED>
 1be:	9f ef       	ldi	r25, 0xFF	; 255
 1c0:	20 e7       	ldi	r18, 0x70	; 112
 1c2:	82 e0       	ldi	r24, 0x02	; 2
 1c4:	91 50       	subi	r25, 0x01	; 1
 1c6:	20 40       	sbci	r18, 0x00	; 0
 1c8:	80 40       	sbci	r24, 0x00	; 0
 1ca:	e1 f7       	brne	.-8      	; 0x1c4 <main+0x122>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <main+0x12c>
 1ce:	00 00       	nop
 1d0:	8c cf       	rjmp	.-232    	; 0xea <main+0x48>

000001d2 <I2C_Slave_Init>:

#include "I2C_Slave_H_File.h"

void I2C_Slave_Init(uint8_t slave_address)
{
	TWAR = slave_address;						/* Assign address in TWI address register */
 1d2:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
	TWCR = (1<<TWEN) | (1<<TWEA) | (1<<TWINT);	/* Enable TWI, Enable ack generation, clear TWI interrupt */
 1d6:	84 ec       	ldi	r24, 0xC4	; 196
 1d8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1dc:	08 95       	ret

000001de <I2C_Slave_Listen>:
int8_t I2C_Slave_Listen()
{
	while(1)
	{
		uint8_t status;							/* Declare variable */
		while (!(TWCR & (1<<TWINT)));			/* Wait to be addressed */
 1de:	ec eb       	ldi	r30, 0xBC	; 188
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
		status = TWSR & 0xF8;					/* Read TWI status register with masking lower three bits */
 1e2:	a9 eb       	ldi	r26, 0xB9	; 185
 1e4:	b0 e0       	ldi	r27, 0x00	; 0
int8_t I2C_Slave_Listen()
{
	while(1)
	{
		uint8_t status;							/* Declare variable */
		while (!(TWCR & (1<<TWINT)));			/* Wait to be addressed */
 1e6:	80 81       	ld	r24, Z
 1e8:	88 23       	and	r24, r24
 1ea:	ec f7       	brge	.-6      	; 0x1e6 <I2C_Slave_Listen+0x8>
		status = TWSR & 0xF8;					/* Read TWI status register with masking lower three bits */
 1ec:	8c 91       	ld	r24, X
 1ee:	98 2f       	mov	r25, r24
 1f0:	98 7f       	andi	r25, 0xF8	; 248
		if (status == 0x60 || status == 0x68)	/* Check weather own SLA+W received & ack returned (TWEA = 1) */
 1f2:	80 7f       	andi	r24, 0xF0	; 240
 1f4:	80 36       	cpi	r24, 0x60	; 96
 1f6:	41 f0       	breq	.+16     	; 0x208 <I2C_Slave_Listen+0x2a>
		return 0;								/* If yes then return 0 to indicate ack returned */
		if (status == 0xA8 || status == 0xB0)	/* Check weather own SLA+R received & ack returned (TWEA = 1) */
 1f8:	98 3a       	cpi	r25, 0xA8	; 168
 1fa:	41 f0       	breq	.+16     	; 0x20c <I2C_Slave_Listen+0x2e>
 1fc:	90 3b       	cpi	r25, 0xB0	; 176
 1fe:	41 f0       	breq	.+16     	; 0x210 <I2C_Slave_Listen+0x32>
		return 1;								/* If yes then return 1 to indicate ack returned */
		if (status == 0x70 || status == 0x78)	/* Check weather general call received & ack returned (TWEA = 1) */
 200:	80 37       	cpi	r24, 0x70	; 112
 202:	89 f7       	brne	.-30     	; 0x1e6 <I2C_Slave_Listen+0x8>
		return 2;								/* If yes then return 2 to indicate ack returned */
 204:	82 e0       	ldi	r24, 0x02	; 2
 206:	08 95       	ret
	{
		uint8_t status;							/* Declare variable */
		while (!(TWCR & (1<<TWINT)));			/* Wait to be addressed */
		status = TWSR & 0xF8;					/* Read TWI status register with masking lower three bits */
		if (status == 0x60 || status == 0x68)	/* Check weather own SLA+W received & ack returned (TWEA = 1) */
		return 0;								/* If yes then return 0 to indicate ack returned */
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	08 95       	ret
		if (status == 0xA8 || status == 0xB0)	/* Check weather own SLA+R received & ack returned (TWEA = 1) */
		return 1;								/* If yes then return 1 to indicate ack returned */
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	08 95       	ret
 210:	81 e0       	ldi	r24, 0x01	; 1
		if (status == 0x70 || status == 0x78)	/* Check weather general call received & ack returned (TWEA = 1) */
		return 2;								/* If yes then return 2 to indicate ack returned */
		else
		continue;								/* Else continue */
	}
}
 212:	08 95       	ret

00000214 <I2C_Slave_Transmit>:

int8_t I2C_Slave_Transmit(char data)
{
	uint8_t status;
	TWDR = data;								/* Write data to TWDR to be transmitted */
 214:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWEN)|(1<<TWINT)|(1<<TWEA);		/* Enable TWI and clear interrupt flag */
 218:	84 ec       	ldi	r24, 0xC4	; 196
 21a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1<<TWINT)));				/* Wait until TWI finish its current job (Write operation) */
 21e:	ec eb       	ldi	r30, 0xBC	; 188
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	80 81       	ld	r24, Z
 224:	88 23       	and	r24, r24
 226:	ec f7       	brge	.-6      	; 0x222 <I2C_Slave_Transmit+0xe>
	status = TWSR & 0xF8;						/* Read TWI status register with masking lower three bits */
 228:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 22c:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0xA0)							/* Check weather STOP/REPEATED START received */
 22e:	80 3a       	cpi	r24, 0xA0	; 160
 230:	39 f4       	brne	.+14     	; 0x240 <I2C_Slave_Transmit+0x2c>
	{
		TWCR |= (1<<TWINT);						/* If yes then clear interrupt flag & return -1 */
 232:	ec eb       	ldi	r30, 0xBC	; 188
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	80 81       	ld	r24, Z
 238:	80 68       	ori	r24, 0x80	; 128
 23a:	80 83       	st	Z, r24
		return -1;
 23c:	8f ef       	ldi	r24, 0xFF	; 255
 23e:	08 95       	ret
	}
	if (status == 0xB8)							/* Check weather data transmitted & ack received */
 240:	88 3b       	cpi	r24, 0xB8	; 184
 242:	69 f0       	breq	.+26     	; 0x25e <I2C_Slave_Transmit+0x4a>
		return 0;									/* If yes then return 0 */
	if (status == 0xC0)							/* Check weather data transmitted & nack received */
 244:	80 3c       	cpi	r24, 0xC0	; 192
 246:	39 f4       	brne	.+14     	; 0x256 <I2C_Slave_Transmit+0x42>
	{
		TWCR |= (1<<TWINT);						/* If yes then clear interrupt flag & return -2 */
 248:	ec eb       	ldi	r30, 0xBC	; 188
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 81       	ld	r24, Z
 24e:	80 68       	ori	r24, 0x80	; 128
 250:	80 83       	st	Z, r24
		return -2;
 252:	8e ef       	ldi	r24, 0xFE	; 254
 254:	08 95       	ret
	}
	if (status == 0xC8)							/* If last data byte transmitted with ack received TWEA = 0 */
 256:	88 3c       	cpi	r24, 0xC8	; 200
 258:	21 f0       	breq	.+8      	; 0x262 <I2C_Slave_Transmit+0x4e>
	return -3;									/* If yes then return -3 */
	else										/* else return -4 */
	return -4;
 25a:	8c ef       	ldi	r24, 0xFC	; 252
 25c:	08 95       	ret
	{
		TWCR |= (1<<TWINT);						/* If yes then clear interrupt flag & return -1 */
		return -1;
	}
	if (status == 0xB8)							/* Check weather data transmitted & ack received */
		return 0;									/* If yes then return 0 */
 25e:	80 e0       	ldi	r24, 0x00	; 0
 260:	08 95       	ret
	{
		TWCR |= (1<<TWINT);						/* If yes then clear interrupt flag & return -2 */
		return -2;
	}
	if (status == 0xC8)							/* If last data byte transmitted with ack received TWEA = 0 */
	return -3;									/* If yes then return -3 */
 262:	8d ef       	ldi	r24, 0xFD	; 253
	else										/* else return -4 */
	return -4;
}
 264:	08 95       	ret

00000266 <I2C_Slave_Receive>:

char I2C_Slave_Receive()
{
	uint8_t status;								/* Declare variable */
	TWCR=(1<<TWEN)|(1<<TWEA)|(1<<TWINT);		/* Enable TWI, generation of ack and clear interrupt flag */
 266:	84 ec       	ldi	r24, 0xC4	; 196
 268:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1<<TWINT)));				/* Wait until TWI finish its current job (read operation) */
 26c:	ec eb       	ldi	r30, 0xBC	; 188
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	80 81       	ld	r24, Z
 272:	88 23       	and	r24, r24
 274:	ec f7       	brge	.-6      	; 0x270 <I2C_Slave_Receive+0xa>
	status = TWSR & 0xF8;						/* Read TWI status register with masking lower three bits */
 276:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	if (status == 0x80 || status == 0x90)		/* Check weather data received & ack returned (TWEA = 1) */
 27a:	98 2f       	mov	r25, r24
 27c:	98 7e       	andi	r25, 0xE8	; 232
 27e:	90 38       	cpi	r25, 0x80	; 128
 280:	19 f4       	brne	.+6      	; 0x288 <I2C_Slave_Receive+0x22>
	return TWDR;								/* If yes then return received data */
 282:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 286:	08 95       	ret
	if (status == 0x88 || status == 0x98)		/* Check weather data received, nack returned and switched to not addressed slave mode */
 288:	98 38       	cpi	r25, 0x88	; 136
 28a:	19 f4       	brne	.+6      	; 0x292 <I2C_Slave_Receive+0x2c>
	return TWDR;								/* If yes then return received data */
 28c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 290:	08 95       	ret
	if (status == 0xA0)							/* Check weather STOP/REPEATED START received */
 292:	88 7f       	andi	r24, 0xF8	; 248
 294:	80 3a       	cpi	r24, 0xA0	; 160
 296:	39 f4       	brne	.+14     	; 0x2a6 <I2C_Slave_Receive+0x40>
	{
		TWCR |= (1<<TWINT);						/* If yes then clear interrupt flag & return 0 */
 298:	ec eb       	ldi	r30, 0xBC	; 188
 29a:	f0 e0       	ldi	r31, 0x00	; 0
 29c:	80 81       	ld	r24, Z
 29e:	80 68       	ori	r24, 0x80	; 128
 2a0:	80 83       	st	Z, r24
		return -1;
 2a2:	8f ef       	ldi	r24, 0xFF	; 255
 2a4:	08 95       	ret
	}
	else
	return -2;									/* Else return 1 */
 2a6:	8e ef       	ldi	r24, 0xFE	; 254
}
 2a8:	08 95       	ret

000002aa <LCD_Command>:
#include "LCD_16x2_H_file.h"						/* Include LCD header file */


void LCD_Command (char cmd)							/* LCD command write function */
{
	LCD_Data_Port = cmd;							/* Write command data to LCD data port */
 2aa:	85 b9       	out	0x05, r24	; 5
	LCD_Command_Port &= ~((1<<RS)|(1<<RW));			/* Make RS LOW (command reg.), RW LOW (Write) */
 2ac:	88 b1       	in	r24, 0x08	; 8
 2ae:	87 7e       	andi	r24, 0xE7	; 231
 2b0:	88 b9       	out	0x08, r24	; 8
	LCD_Command_Port |= (1<<EN);					/* High to Low transition on EN (Enable) */
 2b2:	42 9a       	sbi	0x08, 2	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b4:	82 e0       	ldi	r24, 0x02	; 2
 2b6:	8a 95       	dec	r24
 2b8:	f1 f7       	brne	.-4      	; 0x2b6 <LCD_Command+0xc>
 2ba:	00 c0       	rjmp	.+0      	; 0x2bc <LCD_Command+0x12>
	_delay_us(1);
	LCD_Command_Port &= ~(1<<EN);
 2bc:	42 98       	cbi	0x08, 2	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2be:	8f e6       	ldi	r24, 0x6F	; 111
 2c0:	97 e1       	ldi	r25, 0x17	; 23
 2c2:	01 97       	sbiw	r24, 0x01	; 1
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <LCD_Command+0x18>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <LCD_Command+0x1e>
 2c8:	00 00       	nop
 2ca:	08 95       	ret

000002cc <LCD_Char>:
	_delay_ms(3);									/* Wait little bit */
}

void LCD_Char (char char_data)						/* LCD data write function */
{
	LCD_Data_Port = char_data;						/* Write data to LCD data port */
 2cc:	85 b9       	out	0x05, r24	; 5
	LCD_Command_Port &= ~(1<<RW);					/* Make RW LOW (Write) */
 2ce:	43 98       	cbi	0x08, 3	; 8
	LCD_Command_Port |= (1<<EN)|(1<<RS);			/* Make RS HIGH (data reg.) and High to Low transition on EN (Enable) */
 2d0:	88 b1       	in	r24, 0x08	; 8
 2d2:	84 61       	ori	r24, 0x14	; 20
 2d4:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d6:	82 e0       	ldi	r24, 0x02	; 2
 2d8:	8a 95       	dec	r24
 2da:	f1 f7       	brne	.-4      	; 0x2d8 <LCD_Char+0xc>
 2dc:	00 c0       	rjmp	.+0      	; 0x2de <LCD_Char+0x12>
	_delay_us(1);
	LCD_Command_Port &= ~(1<<EN);
 2de:	42 98       	cbi	0x08, 2	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2e0:	8f ec       	ldi	r24, 0xCF	; 207
 2e2:	97 e0       	ldi	r25, 0x07	; 7
 2e4:	01 97       	sbiw	r24, 0x01	; 1
 2e6:	f1 f7       	brne	.-4      	; 0x2e4 <LCD_Char+0x18>
 2e8:	00 c0       	rjmp	.+0      	; 0x2ea <LCD_Char+0x1e>
 2ea:	00 00       	nop
 2ec:	08 95       	ret

000002ee <LCD_Init>:
	_delay_ms(1);									/* Wait little bit */
}

void LCD_Init (void)								/* LCD Initialize function */
{
	LCD_Command_Dir |= (1<<RS)|(1<<RW)|(1<<EN);		/* Make LCD command port direction as o/p */
 2ee:	87 b1       	in	r24, 0x07	; 7
 2f0:	8c 61       	ori	r24, 0x1C	; 28
 2f2:	87 b9       	out	0x07, r24	; 7
	LCD_Data_Dir = 0xFF;							/* Make LCD data port direction as o/p */
 2f4:	8f ef       	ldi	r24, 0xFF	; 255
 2f6:	84 b9       	out	0x04, r24	; 4
 2f8:	8f e3       	ldi	r24, 0x3F	; 63
 2fa:	9c e9       	ldi	r25, 0x9C	; 156
 2fc:	01 97       	sbiw	r24, 0x01	; 1
 2fe:	f1 f7       	brne	.-4      	; 0x2fc <LCD_Init+0xe>
 300:	00 c0       	rjmp	.+0      	; 0x302 <LCD_Init+0x14>
 302:	00 00       	nop
	
	_delay_ms(20);									/* LCD power up time to get things ready, it should always >15ms */
	LCD_Command (0x38);								/* Initialize 16X2 LCD in 8bit mode */
 304:	88 e3       	ldi	r24, 0x38	; 56
 306:	0e 94 55 01 	call	0x2aa	; 0x2aa <LCD_Command>
	LCD_Command (0x0C);								/* Display ON, Cursor OFF command */
 30a:	8c e0       	ldi	r24, 0x0C	; 12
 30c:	0e 94 55 01 	call	0x2aa	; 0x2aa <LCD_Command>
	LCD_Command (0x06);								/* Auto Increment cursor */
 310:	86 e0       	ldi	r24, 0x06	; 6
 312:	0e 94 55 01 	call	0x2aa	; 0x2aa <LCD_Command>
	LCD_Command (0x01);								/* Clear LCD command */
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	0e 94 55 01 	call	0x2aa	; 0x2aa <LCD_Command>
	LCD_Command (0x80);								/* 8 is for first line and 0 is for 0th position */
 31c:	80 e8       	ldi	r24, 0x80	; 128
 31e:	0e 94 55 01 	call	0x2aa	; 0x2aa <LCD_Command>
 322:	08 95       	ret

00000324 <LCD_String>:
}

void LCD_String (char *str)							/* Send string to LCD function */
{
 324:	cf 93       	push	r28
 326:	df 93       	push	r29
 328:	ec 01       	movw	r28, r24
	int i;
	for(i=0;str[i]!=0;i++)							/* Send each char of string till the NULL */
 32a:	88 81       	ld	r24, Y
 32c:	88 23       	and	r24, r24
 32e:	31 f0       	breq	.+12     	; 0x33c <LCD_String+0x18>
 330:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_Char (str[i]);							/* Call LCD data write */
 332:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCD_Char>
}

void LCD_String (char *str)							/* Send string to LCD function */
{
	int i;
	for(i=0;str[i]!=0;i++)							/* Send each char of string till the NULL */
 336:	89 91       	ld	r24, Y+
 338:	81 11       	cpse	r24, r1
 33a:	fb cf       	rjmp	.-10     	; 0x332 <LCD_String+0xe>
	{
		LCD_Char (str[i]);							/* Call LCD data write */
	}
}
 33c:	df 91       	pop	r29
 33e:	cf 91       	pop	r28
 340:	08 95       	ret

00000342 <LCD_String_xy>:

void LCD_String_xy (char row, char pos, char *str)	/* Send string to LCD function */
{
 342:	cf 93       	push	r28
 344:	df 93       	push	r29
 346:	ea 01       	movw	r28, r20
	if (row == 1)
 348:	81 30       	cpi	r24, 0x01	; 1
 34a:	31 f4       	brne	.+12     	; 0x358 <LCD_String_xy+0x16>
		LCD_Command((pos & 0x0F)|0x80);				/* Command of first row and required position<16 */
 34c:	86 2f       	mov	r24, r22
 34e:	8f 70       	andi	r24, 0x0F	; 15
 350:	80 68       	ori	r24, 0x80	; 128
 352:	0e 94 55 01 	call	0x2aa	; 0x2aa <LCD_Command>
 356:	07 c0       	rjmp	.+14     	; 0x366 <LCD_String_xy+0x24>
	else if (row == 2)
 358:	82 30       	cpi	r24, 0x02	; 2
 35a:	29 f4       	brne	.+10     	; 0x366 <LCD_String_xy+0x24>
		LCD_Command((pos & 0x0F)|0xC0);				/* Command of Second row and required position<16 */
 35c:	86 2f       	mov	r24, r22
 35e:	8f 70       	andi	r24, 0x0F	; 15
 360:	80 6c       	ori	r24, 0xC0	; 192
 362:	0e 94 55 01 	call	0x2aa	; 0x2aa <LCD_Command>
	LCD_String(str);								/* Call LCD string function */
 366:	ce 01       	movw	r24, r28
 368:	0e 94 92 01 	call	0x324	; 0x324 <LCD_String>
}
 36c:	df 91       	pop	r29
 36e:	cf 91       	pop	r28
 370:	08 95       	ret

00000372 <sprintf>:
 372:	ae e0       	ldi	r26, 0x0E	; 14
 374:	b0 e0       	ldi	r27, 0x00	; 0
 376:	ef eb       	ldi	r30, 0xBF	; 191
 378:	f1 e0       	ldi	r31, 0x01	; 1
 37a:	0c 94 7a 04 	jmp	0x8f4	; 0x8f4 <__prologue_saves__+0x1c>
 37e:	0d 89       	ldd	r16, Y+21	; 0x15
 380:	1e 89       	ldd	r17, Y+22	; 0x16
 382:	86 e0       	ldi	r24, 0x06	; 6
 384:	8c 83       	std	Y+4, r24	; 0x04
 386:	1a 83       	std	Y+2, r17	; 0x02
 388:	09 83       	std	Y+1, r16	; 0x01
 38a:	8f ef       	ldi	r24, 0xFF	; 255
 38c:	9f e7       	ldi	r25, 0x7F	; 127
 38e:	9e 83       	std	Y+6, r25	; 0x06
 390:	8d 83       	std	Y+5, r24	; 0x05
 392:	ae 01       	movw	r20, r28
 394:	47 5e       	subi	r20, 0xE7	; 231
 396:	5f 4f       	sbci	r21, 0xFF	; 255
 398:	6f 89       	ldd	r22, Y+23	; 0x17
 39a:	78 8d       	ldd	r23, Y+24	; 0x18
 39c:	ce 01       	movw	r24, r28
 39e:	01 96       	adiw	r24, 0x01	; 1
 3a0:	0e 94 db 01 	call	0x3b6	; 0x3b6 <vfprintf>
 3a4:	ef 81       	ldd	r30, Y+7	; 0x07
 3a6:	f8 85       	ldd	r31, Y+8	; 0x08
 3a8:	e0 0f       	add	r30, r16
 3aa:	f1 1f       	adc	r31, r17
 3ac:	10 82       	st	Z, r1
 3ae:	2e 96       	adiw	r28, 0x0e	; 14
 3b0:	e4 e0       	ldi	r30, 0x04	; 4
 3b2:	0c 94 96 04 	jmp	0x92c	; 0x92c <__epilogue_restores__+0x1c>

000003b6 <vfprintf>:
 3b6:	ab e0       	ldi	r26, 0x0B	; 11
 3b8:	b0 e0       	ldi	r27, 0x00	; 0
 3ba:	e1 ee       	ldi	r30, 0xE1	; 225
 3bc:	f1 e0       	ldi	r31, 0x01	; 1
 3be:	0c 94 6c 04 	jmp	0x8d8	; 0x8d8 <__prologue_saves__>
 3c2:	6c 01       	movw	r12, r24
 3c4:	7b 01       	movw	r14, r22
 3c6:	8a 01       	movw	r16, r20
 3c8:	fc 01       	movw	r30, r24
 3ca:	17 82       	std	Z+7, r1	; 0x07
 3cc:	16 82       	std	Z+6, r1	; 0x06
 3ce:	83 81       	ldd	r24, Z+3	; 0x03
 3d0:	81 ff       	sbrs	r24, 1
 3d2:	cc c1       	rjmp	.+920    	; 0x76c <__EEPROM_REGION_LENGTH__+0x36c>
 3d4:	ce 01       	movw	r24, r28
 3d6:	01 96       	adiw	r24, 0x01	; 1
 3d8:	3c 01       	movw	r6, r24
 3da:	f6 01       	movw	r30, r12
 3dc:	93 81       	ldd	r25, Z+3	; 0x03
 3de:	f7 01       	movw	r30, r14
 3e0:	93 fd       	sbrc	r25, 3
 3e2:	85 91       	lpm	r24, Z+
 3e4:	93 ff       	sbrs	r25, 3
 3e6:	81 91       	ld	r24, Z+
 3e8:	7f 01       	movw	r14, r30
 3ea:	88 23       	and	r24, r24
 3ec:	09 f4       	brne	.+2      	; 0x3f0 <vfprintf+0x3a>
 3ee:	ba c1       	rjmp	.+884    	; 0x764 <__EEPROM_REGION_LENGTH__+0x364>
 3f0:	85 32       	cpi	r24, 0x25	; 37
 3f2:	39 f4       	brne	.+14     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3f4:	93 fd       	sbrc	r25, 3
 3f6:	85 91       	lpm	r24, Z+
 3f8:	93 ff       	sbrs	r25, 3
 3fa:	81 91       	ld	r24, Z+
 3fc:	7f 01       	movw	r14, r30
 3fe:	85 32       	cpi	r24, 0x25	; 37
 400:	29 f4       	brne	.+10     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 402:	b6 01       	movw	r22, r12
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <fputc>
 40a:	e7 cf       	rjmp	.-50     	; 0x3da <vfprintf+0x24>
 40c:	91 2c       	mov	r9, r1
 40e:	21 2c       	mov	r2, r1
 410:	31 2c       	mov	r3, r1
 412:	ff e1       	ldi	r31, 0x1F	; 31
 414:	f3 15       	cp	r31, r3
 416:	d8 f0       	brcs	.+54     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 418:	8b 32       	cpi	r24, 0x2B	; 43
 41a:	79 f0       	breq	.+30     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 41c:	38 f4       	brcc	.+14     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 41e:	80 32       	cpi	r24, 0x20	; 32
 420:	79 f0       	breq	.+30     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 422:	83 32       	cpi	r24, 0x23	; 35
 424:	a1 f4       	brne	.+40     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 426:	23 2d       	mov	r18, r3
 428:	20 61       	ori	r18, 0x10	; 16
 42a:	1d c0       	rjmp	.+58     	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 42c:	8d 32       	cpi	r24, 0x2D	; 45
 42e:	61 f0       	breq	.+24     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 430:	80 33       	cpi	r24, 0x30	; 48
 432:	69 f4       	brne	.+26     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 434:	23 2d       	mov	r18, r3
 436:	21 60       	ori	r18, 0x01	; 1
 438:	16 c0       	rjmp	.+44     	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 43a:	83 2d       	mov	r24, r3
 43c:	82 60       	ori	r24, 0x02	; 2
 43e:	38 2e       	mov	r3, r24
 440:	e3 2d       	mov	r30, r3
 442:	e4 60       	ori	r30, 0x04	; 4
 444:	3e 2e       	mov	r3, r30
 446:	2a c0       	rjmp	.+84     	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 448:	f3 2d       	mov	r31, r3
 44a:	f8 60       	ori	r31, 0x08	; 8
 44c:	1d c0       	rjmp	.+58     	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
 44e:	37 fc       	sbrc	r3, 7
 450:	2d c0       	rjmp	.+90     	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
 452:	20 ed       	ldi	r18, 0xD0	; 208
 454:	28 0f       	add	r18, r24
 456:	2a 30       	cpi	r18, 0x0A	; 10
 458:	40 f0       	brcs	.+16     	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
 45a:	8e 32       	cpi	r24, 0x2E	; 46
 45c:	b9 f4       	brne	.+46     	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
 45e:	36 fc       	sbrc	r3, 6
 460:	81 c1       	rjmp	.+770    	; 0x764 <__EEPROM_REGION_LENGTH__+0x364>
 462:	23 2d       	mov	r18, r3
 464:	20 64       	ori	r18, 0x40	; 64
 466:	32 2e       	mov	r3, r18
 468:	19 c0       	rjmp	.+50     	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 46a:	36 fe       	sbrs	r3, 6
 46c:	06 c0       	rjmp	.+12     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
 46e:	8a e0       	ldi	r24, 0x0A	; 10
 470:	98 9e       	mul	r9, r24
 472:	20 0d       	add	r18, r0
 474:	11 24       	eor	r1, r1
 476:	92 2e       	mov	r9, r18
 478:	11 c0       	rjmp	.+34     	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 47a:	ea e0       	ldi	r30, 0x0A	; 10
 47c:	2e 9e       	mul	r2, r30
 47e:	20 0d       	add	r18, r0
 480:	11 24       	eor	r1, r1
 482:	22 2e       	mov	r2, r18
 484:	f3 2d       	mov	r31, r3
 486:	f0 62       	ori	r31, 0x20	; 32
 488:	3f 2e       	mov	r3, r31
 48a:	08 c0       	rjmp	.+16     	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 48c:	8c 36       	cpi	r24, 0x6C	; 108
 48e:	21 f4       	brne	.+8      	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
 490:	83 2d       	mov	r24, r3
 492:	80 68       	ori	r24, 0x80	; 128
 494:	38 2e       	mov	r3, r24
 496:	02 c0       	rjmp	.+4      	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 498:	88 36       	cpi	r24, 0x68	; 104
 49a:	41 f4       	brne	.+16     	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
 49c:	f7 01       	movw	r30, r14
 49e:	93 fd       	sbrc	r25, 3
 4a0:	85 91       	lpm	r24, Z+
 4a2:	93 ff       	sbrs	r25, 3
 4a4:	81 91       	ld	r24, Z+
 4a6:	7f 01       	movw	r14, r30
 4a8:	81 11       	cpse	r24, r1
 4aa:	b3 cf       	rjmp	.-154    	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 4ac:	98 2f       	mov	r25, r24
 4ae:	9f 7d       	andi	r25, 0xDF	; 223
 4b0:	95 54       	subi	r25, 0x45	; 69
 4b2:	93 30       	cpi	r25, 0x03	; 3
 4b4:	28 f4       	brcc	.+10     	; 0x4c0 <__EEPROM_REGION_LENGTH__+0xc0>
 4b6:	0c 5f       	subi	r16, 0xFC	; 252
 4b8:	1f 4f       	sbci	r17, 0xFF	; 255
 4ba:	9f e3       	ldi	r25, 0x3F	; 63
 4bc:	99 83       	std	Y+1, r25	; 0x01
 4be:	0d c0       	rjmp	.+26     	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
 4c0:	83 36       	cpi	r24, 0x63	; 99
 4c2:	31 f0       	breq	.+12     	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
 4c4:	83 37       	cpi	r24, 0x73	; 115
 4c6:	71 f0       	breq	.+28     	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
 4c8:	83 35       	cpi	r24, 0x53	; 83
 4ca:	09 f0       	breq	.+2      	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
 4cc:	59 c0       	rjmp	.+178    	; 0x580 <__EEPROM_REGION_LENGTH__+0x180>
 4ce:	21 c0       	rjmp	.+66     	; 0x512 <__EEPROM_REGION_LENGTH__+0x112>
 4d0:	f8 01       	movw	r30, r16
 4d2:	80 81       	ld	r24, Z
 4d4:	89 83       	std	Y+1, r24	; 0x01
 4d6:	0e 5f       	subi	r16, 0xFE	; 254
 4d8:	1f 4f       	sbci	r17, 0xFF	; 255
 4da:	88 24       	eor	r8, r8
 4dc:	83 94       	inc	r8
 4de:	91 2c       	mov	r9, r1
 4e0:	53 01       	movw	r10, r6
 4e2:	13 c0       	rjmp	.+38     	; 0x50a <__EEPROM_REGION_LENGTH__+0x10a>
 4e4:	28 01       	movw	r4, r16
 4e6:	f2 e0       	ldi	r31, 0x02	; 2
 4e8:	4f 0e       	add	r4, r31
 4ea:	51 1c       	adc	r5, r1
 4ec:	f8 01       	movw	r30, r16
 4ee:	a0 80       	ld	r10, Z
 4f0:	b1 80       	ldd	r11, Z+1	; 0x01
 4f2:	36 fe       	sbrs	r3, 6
 4f4:	03 c0       	rjmp	.+6      	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>
 4f6:	69 2d       	mov	r22, r9
 4f8:	70 e0       	ldi	r23, 0x00	; 0
 4fa:	02 c0       	rjmp	.+4      	; 0x500 <__EEPROM_REGION_LENGTH__+0x100>
 4fc:	6f ef       	ldi	r22, 0xFF	; 255
 4fe:	7f ef       	ldi	r23, 0xFF	; 255
 500:	c5 01       	movw	r24, r10
 502:	0e 94 c7 03 	call	0x78e	; 0x78e <strnlen>
 506:	4c 01       	movw	r8, r24
 508:	82 01       	movw	r16, r4
 50a:	f3 2d       	mov	r31, r3
 50c:	ff 77       	andi	r31, 0x7F	; 127
 50e:	3f 2e       	mov	r3, r31
 510:	16 c0       	rjmp	.+44     	; 0x53e <__EEPROM_REGION_LENGTH__+0x13e>
 512:	28 01       	movw	r4, r16
 514:	22 e0       	ldi	r18, 0x02	; 2
 516:	42 0e       	add	r4, r18
 518:	51 1c       	adc	r5, r1
 51a:	f8 01       	movw	r30, r16
 51c:	a0 80       	ld	r10, Z
 51e:	b1 80       	ldd	r11, Z+1	; 0x01
 520:	36 fe       	sbrs	r3, 6
 522:	03 c0       	rjmp	.+6      	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
 524:	69 2d       	mov	r22, r9
 526:	70 e0       	ldi	r23, 0x00	; 0
 528:	02 c0       	rjmp	.+4      	; 0x52e <__EEPROM_REGION_LENGTH__+0x12e>
 52a:	6f ef       	ldi	r22, 0xFF	; 255
 52c:	7f ef       	ldi	r23, 0xFF	; 255
 52e:	c5 01       	movw	r24, r10
 530:	0e 94 bc 03 	call	0x778	; 0x778 <strnlen_P>
 534:	4c 01       	movw	r8, r24
 536:	f3 2d       	mov	r31, r3
 538:	f0 68       	ori	r31, 0x80	; 128
 53a:	3f 2e       	mov	r3, r31
 53c:	82 01       	movw	r16, r4
 53e:	33 fc       	sbrc	r3, 3
 540:	1b c0       	rjmp	.+54     	; 0x578 <__EEPROM_REGION_LENGTH__+0x178>
 542:	82 2d       	mov	r24, r2
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	88 16       	cp	r8, r24
 548:	99 06       	cpc	r9, r25
 54a:	b0 f4       	brcc	.+44     	; 0x578 <__EEPROM_REGION_LENGTH__+0x178>
 54c:	b6 01       	movw	r22, r12
 54e:	80 e2       	ldi	r24, 0x20	; 32
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <fputc>
 556:	2a 94       	dec	r2
 558:	f4 cf       	rjmp	.-24     	; 0x542 <__EEPROM_REGION_LENGTH__+0x142>
 55a:	f5 01       	movw	r30, r10
 55c:	37 fc       	sbrc	r3, 7
 55e:	85 91       	lpm	r24, Z+
 560:	37 fe       	sbrs	r3, 7
 562:	81 91       	ld	r24, Z+
 564:	5f 01       	movw	r10, r30
 566:	b6 01       	movw	r22, r12
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <fputc>
 56e:	21 10       	cpse	r2, r1
 570:	2a 94       	dec	r2
 572:	21 e0       	ldi	r18, 0x01	; 1
 574:	82 1a       	sub	r8, r18
 576:	91 08       	sbc	r9, r1
 578:	81 14       	cp	r8, r1
 57a:	91 04       	cpc	r9, r1
 57c:	71 f7       	brne	.-36     	; 0x55a <__EEPROM_REGION_LENGTH__+0x15a>
 57e:	e8 c0       	rjmp	.+464    	; 0x750 <__EEPROM_REGION_LENGTH__+0x350>
 580:	84 36       	cpi	r24, 0x64	; 100
 582:	11 f0       	breq	.+4      	; 0x588 <__EEPROM_REGION_LENGTH__+0x188>
 584:	89 36       	cpi	r24, 0x69	; 105
 586:	41 f5       	brne	.+80     	; 0x5d8 <__EEPROM_REGION_LENGTH__+0x1d8>
 588:	f8 01       	movw	r30, r16
 58a:	37 fe       	sbrs	r3, 7
 58c:	07 c0       	rjmp	.+14     	; 0x59c <__EEPROM_REGION_LENGTH__+0x19c>
 58e:	60 81       	ld	r22, Z
 590:	71 81       	ldd	r23, Z+1	; 0x01
 592:	82 81       	ldd	r24, Z+2	; 0x02
 594:	93 81       	ldd	r25, Z+3	; 0x03
 596:	0c 5f       	subi	r16, 0xFC	; 252
 598:	1f 4f       	sbci	r17, 0xFF	; 255
 59a:	08 c0       	rjmp	.+16     	; 0x5ac <__EEPROM_REGION_LENGTH__+0x1ac>
 59c:	60 81       	ld	r22, Z
 59e:	71 81       	ldd	r23, Z+1	; 0x01
 5a0:	07 2e       	mov	r0, r23
 5a2:	00 0c       	add	r0, r0
 5a4:	88 0b       	sbc	r24, r24
 5a6:	99 0b       	sbc	r25, r25
 5a8:	0e 5f       	subi	r16, 0xFE	; 254
 5aa:	1f 4f       	sbci	r17, 0xFF	; 255
 5ac:	f3 2d       	mov	r31, r3
 5ae:	ff 76       	andi	r31, 0x6F	; 111
 5b0:	3f 2e       	mov	r3, r31
 5b2:	97 ff       	sbrs	r25, 7
 5b4:	09 c0       	rjmp	.+18     	; 0x5c8 <__EEPROM_REGION_LENGTH__+0x1c8>
 5b6:	90 95       	com	r25
 5b8:	80 95       	com	r24
 5ba:	70 95       	com	r23
 5bc:	61 95       	neg	r22
 5be:	7f 4f       	sbci	r23, 0xFF	; 255
 5c0:	8f 4f       	sbci	r24, 0xFF	; 255
 5c2:	9f 4f       	sbci	r25, 0xFF	; 255
 5c4:	f0 68       	ori	r31, 0x80	; 128
 5c6:	3f 2e       	mov	r3, r31
 5c8:	2a e0       	ldi	r18, 0x0A	; 10
 5ca:	30 e0       	ldi	r19, 0x00	; 0
 5cc:	a3 01       	movw	r20, r6
 5ce:	0e 94 0e 04 	call	0x81c	; 0x81c <__ultoa_invert>
 5d2:	88 2e       	mov	r8, r24
 5d4:	86 18       	sub	r8, r6
 5d6:	45 c0       	rjmp	.+138    	; 0x662 <__EEPROM_REGION_LENGTH__+0x262>
 5d8:	85 37       	cpi	r24, 0x75	; 117
 5da:	31 f4       	brne	.+12     	; 0x5e8 <__EEPROM_REGION_LENGTH__+0x1e8>
 5dc:	23 2d       	mov	r18, r3
 5de:	2f 7e       	andi	r18, 0xEF	; 239
 5e0:	b2 2e       	mov	r11, r18
 5e2:	2a e0       	ldi	r18, 0x0A	; 10
 5e4:	30 e0       	ldi	r19, 0x00	; 0
 5e6:	25 c0       	rjmp	.+74     	; 0x632 <__EEPROM_REGION_LENGTH__+0x232>
 5e8:	93 2d       	mov	r25, r3
 5ea:	99 7f       	andi	r25, 0xF9	; 249
 5ec:	b9 2e       	mov	r11, r25
 5ee:	8f 36       	cpi	r24, 0x6F	; 111
 5f0:	c1 f0       	breq	.+48     	; 0x622 <__EEPROM_REGION_LENGTH__+0x222>
 5f2:	18 f4       	brcc	.+6      	; 0x5fa <__EEPROM_REGION_LENGTH__+0x1fa>
 5f4:	88 35       	cpi	r24, 0x58	; 88
 5f6:	79 f0       	breq	.+30     	; 0x616 <__EEPROM_REGION_LENGTH__+0x216>
 5f8:	b5 c0       	rjmp	.+362    	; 0x764 <__EEPROM_REGION_LENGTH__+0x364>
 5fa:	80 37       	cpi	r24, 0x70	; 112
 5fc:	19 f0       	breq	.+6      	; 0x604 <__EEPROM_REGION_LENGTH__+0x204>
 5fe:	88 37       	cpi	r24, 0x78	; 120
 600:	21 f0       	breq	.+8      	; 0x60a <__EEPROM_REGION_LENGTH__+0x20a>
 602:	b0 c0       	rjmp	.+352    	; 0x764 <__EEPROM_REGION_LENGTH__+0x364>
 604:	e9 2f       	mov	r30, r25
 606:	e0 61       	ori	r30, 0x10	; 16
 608:	be 2e       	mov	r11, r30
 60a:	b4 fe       	sbrs	r11, 4
 60c:	0d c0       	rjmp	.+26     	; 0x628 <__EEPROM_REGION_LENGTH__+0x228>
 60e:	fb 2d       	mov	r31, r11
 610:	f4 60       	ori	r31, 0x04	; 4
 612:	bf 2e       	mov	r11, r31
 614:	09 c0       	rjmp	.+18     	; 0x628 <__EEPROM_REGION_LENGTH__+0x228>
 616:	34 fe       	sbrs	r3, 4
 618:	0a c0       	rjmp	.+20     	; 0x62e <__EEPROM_REGION_LENGTH__+0x22e>
 61a:	29 2f       	mov	r18, r25
 61c:	26 60       	ori	r18, 0x06	; 6
 61e:	b2 2e       	mov	r11, r18
 620:	06 c0       	rjmp	.+12     	; 0x62e <__EEPROM_REGION_LENGTH__+0x22e>
 622:	28 e0       	ldi	r18, 0x08	; 8
 624:	30 e0       	ldi	r19, 0x00	; 0
 626:	05 c0       	rjmp	.+10     	; 0x632 <__EEPROM_REGION_LENGTH__+0x232>
 628:	20 e1       	ldi	r18, 0x10	; 16
 62a:	30 e0       	ldi	r19, 0x00	; 0
 62c:	02 c0       	rjmp	.+4      	; 0x632 <__EEPROM_REGION_LENGTH__+0x232>
 62e:	20 e1       	ldi	r18, 0x10	; 16
 630:	32 e0       	ldi	r19, 0x02	; 2
 632:	f8 01       	movw	r30, r16
 634:	b7 fe       	sbrs	r11, 7
 636:	07 c0       	rjmp	.+14     	; 0x646 <__EEPROM_REGION_LENGTH__+0x246>
 638:	60 81       	ld	r22, Z
 63a:	71 81       	ldd	r23, Z+1	; 0x01
 63c:	82 81       	ldd	r24, Z+2	; 0x02
 63e:	93 81       	ldd	r25, Z+3	; 0x03
 640:	0c 5f       	subi	r16, 0xFC	; 252
 642:	1f 4f       	sbci	r17, 0xFF	; 255
 644:	06 c0       	rjmp	.+12     	; 0x652 <__EEPROM_REGION_LENGTH__+0x252>
 646:	60 81       	ld	r22, Z
 648:	71 81       	ldd	r23, Z+1	; 0x01
 64a:	80 e0       	ldi	r24, 0x00	; 0
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	0e 5f       	subi	r16, 0xFE	; 254
 650:	1f 4f       	sbci	r17, 0xFF	; 255
 652:	a3 01       	movw	r20, r6
 654:	0e 94 0e 04 	call	0x81c	; 0x81c <__ultoa_invert>
 658:	88 2e       	mov	r8, r24
 65a:	86 18       	sub	r8, r6
 65c:	fb 2d       	mov	r31, r11
 65e:	ff 77       	andi	r31, 0x7F	; 127
 660:	3f 2e       	mov	r3, r31
 662:	36 fe       	sbrs	r3, 6
 664:	0d c0       	rjmp	.+26     	; 0x680 <__EEPROM_REGION_LENGTH__+0x280>
 666:	23 2d       	mov	r18, r3
 668:	2e 7f       	andi	r18, 0xFE	; 254
 66a:	a2 2e       	mov	r10, r18
 66c:	89 14       	cp	r8, r9
 66e:	58 f4       	brcc	.+22     	; 0x686 <__EEPROM_REGION_LENGTH__+0x286>
 670:	34 fe       	sbrs	r3, 4
 672:	0b c0       	rjmp	.+22     	; 0x68a <__EEPROM_REGION_LENGTH__+0x28a>
 674:	32 fc       	sbrc	r3, 2
 676:	09 c0       	rjmp	.+18     	; 0x68a <__EEPROM_REGION_LENGTH__+0x28a>
 678:	83 2d       	mov	r24, r3
 67a:	8e 7e       	andi	r24, 0xEE	; 238
 67c:	a8 2e       	mov	r10, r24
 67e:	05 c0       	rjmp	.+10     	; 0x68a <__EEPROM_REGION_LENGTH__+0x28a>
 680:	b8 2c       	mov	r11, r8
 682:	a3 2c       	mov	r10, r3
 684:	03 c0       	rjmp	.+6      	; 0x68c <__EEPROM_REGION_LENGTH__+0x28c>
 686:	b8 2c       	mov	r11, r8
 688:	01 c0       	rjmp	.+2      	; 0x68c <__EEPROM_REGION_LENGTH__+0x28c>
 68a:	b9 2c       	mov	r11, r9
 68c:	a4 fe       	sbrs	r10, 4
 68e:	0f c0       	rjmp	.+30     	; 0x6ae <__EEPROM_REGION_LENGTH__+0x2ae>
 690:	fe 01       	movw	r30, r28
 692:	e8 0d       	add	r30, r8
 694:	f1 1d       	adc	r31, r1
 696:	80 81       	ld	r24, Z
 698:	80 33       	cpi	r24, 0x30	; 48
 69a:	21 f4       	brne	.+8      	; 0x6a4 <__EEPROM_REGION_LENGTH__+0x2a4>
 69c:	9a 2d       	mov	r25, r10
 69e:	99 7e       	andi	r25, 0xE9	; 233
 6a0:	a9 2e       	mov	r10, r25
 6a2:	09 c0       	rjmp	.+18     	; 0x6b6 <__EEPROM_REGION_LENGTH__+0x2b6>
 6a4:	a2 fe       	sbrs	r10, 2
 6a6:	06 c0       	rjmp	.+12     	; 0x6b4 <__EEPROM_REGION_LENGTH__+0x2b4>
 6a8:	b3 94       	inc	r11
 6aa:	b3 94       	inc	r11
 6ac:	04 c0       	rjmp	.+8      	; 0x6b6 <__EEPROM_REGION_LENGTH__+0x2b6>
 6ae:	8a 2d       	mov	r24, r10
 6b0:	86 78       	andi	r24, 0x86	; 134
 6b2:	09 f0       	breq	.+2      	; 0x6b6 <__EEPROM_REGION_LENGTH__+0x2b6>
 6b4:	b3 94       	inc	r11
 6b6:	a3 fc       	sbrc	r10, 3
 6b8:	11 c0       	rjmp	.+34     	; 0x6dc <__EEPROM_REGION_LENGTH__+0x2dc>
 6ba:	a0 fe       	sbrs	r10, 0
 6bc:	06 c0       	rjmp	.+12     	; 0x6ca <__EEPROM_REGION_LENGTH__+0x2ca>
 6be:	b2 14       	cp	r11, r2
 6c0:	88 f4       	brcc	.+34     	; 0x6e4 <__EEPROM_REGION_LENGTH__+0x2e4>
 6c2:	28 0c       	add	r2, r8
 6c4:	92 2c       	mov	r9, r2
 6c6:	9b 18       	sub	r9, r11
 6c8:	0e c0       	rjmp	.+28     	; 0x6e6 <__EEPROM_REGION_LENGTH__+0x2e6>
 6ca:	b2 14       	cp	r11, r2
 6cc:	60 f4       	brcc	.+24     	; 0x6e6 <__EEPROM_REGION_LENGTH__+0x2e6>
 6ce:	b6 01       	movw	r22, r12
 6d0:	80 e2       	ldi	r24, 0x20	; 32
 6d2:	90 e0       	ldi	r25, 0x00	; 0
 6d4:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <fputc>
 6d8:	b3 94       	inc	r11
 6da:	f7 cf       	rjmp	.-18     	; 0x6ca <__EEPROM_REGION_LENGTH__+0x2ca>
 6dc:	b2 14       	cp	r11, r2
 6de:	18 f4       	brcc	.+6      	; 0x6e6 <__EEPROM_REGION_LENGTH__+0x2e6>
 6e0:	2b 18       	sub	r2, r11
 6e2:	02 c0       	rjmp	.+4      	; 0x6e8 <__EEPROM_REGION_LENGTH__+0x2e8>
 6e4:	98 2c       	mov	r9, r8
 6e6:	21 2c       	mov	r2, r1
 6e8:	a4 fe       	sbrs	r10, 4
 6ea:	10 c0       	rjmp	.+32     	; 0x70c <__EEPROM_REGION_LENGTH__+0x30c>
 6ec:	b6 01       	movw	r22, r12
 6ee:	80 e3       	ldi	r24, 0x30	; 48
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <fputc>
 6f6:	a2 fe       	sbrs	r10, 2
 6f8:	17 c0       	rjmp	.+46     	; 0x728 <__EEPROM_REGION_LENGTH__+0x328>
 6fa:	a1 fc       	sbrc	r10, 1
 6fc:	03 c0       	rjmp	.+6      	; 0x704 <__EEPROM_REGION_LENGTH__+0x304>
 6fe:	88 e7       	ldi	r24, 0x78	; 120
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	02 c0       	rjmp	.+4      	; 0x708 <__EEPROM_REGION_LENGTH__+0x308>
 704:	88 e5       	ldi	r24, 0x58	; 88
 706:	90 e0       	ldi	r25, 0x00	; 0
 708:	b6 01       	movw	r22, r12
 70a:	0c c0       	rjmp	.+24     	; 0x724 <__EEPROM_REGION_LENGTH__+0x324>
 70c:	8a 2d       	mov	r24, r10
 70e:	86 78       	andi	r24, 0x86	; 134
 710:	59 f0       	breq	.+22     	; 0x728 <__EEPROM_REGION_LENGTH__+0x328>
 712:	a1 fe       	sbrs	r10, 1
 714:	02 c0       	rjmp	.+4      	; 0x71a <__EEPROM_REGION_LENGTH__+0x31a>
 716:	8b e2       	ldi	r24, 0x2B	; 43
 718:	01 c0       	rjmp	.+2      	; 0x71c <__EEPROM_REGION_LENGTH__+0x31c>
 71a:	80 e2       	ldi	r24, 0x20	; 32
 71c:	a7 fc       	sbrc	r10, 7
 71e:	8d e2       	ldi	r24, 0x2D	; 45
 720:	b6 01       	movw	r22, r12
 722:	90 e0       	ldi	r25, 0x00	; 0
 724:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <fputc>
 728:	89 14       	cp	r8, r9
 72a:	38 f4       	brcc	.+14     	; 0x73a <__EEPROM_REGION_LENGTH__+0x33a>
 72c:	b6 01       	movw	r22, r12
 72e:	80 e3       	ldi	r24, 0x30	; 48
 730:	90 e0       	ldi	r25, 0x00	; 0
 732:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <fputc>
 736:	9a 94       	dec	r9
 738:	f7 cf       	rjmp	.-18     	; 0x728 <__EEPROM_REGION_LENGTH__+0x328>
 73a:	8a 94       	dec	r8
 73c:	f3 01       	movw	r30, r6
 73e:	e8 0d       	add	r30, r8
 740:	f1 1d       	adc	r31, r1
 742:	80 81       	ld	r24, Z
 744:	b6 01       	movw	r22, r12
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <fputc>
 74c:	81 10       	cpse	r8, r1
 74e:	f5 cf       	rjmp	.-22     	; 0x73a <__EEPROM_REGION_LENGTH__+0x33a>
 750:	22 20       	and	r2, r2
 752:	09 f4       	brne	.+2      	; 0x756 <__EEPROM_REGION_LENGTH__+0x356>
 754:	42 ce       	rjmp	.-892    	; 0x3da <vfprintf+0x24>
 756:	b6 01       	movw	r22, r12
 758:	80 e2       	ldi	r24, 0x20	; 32
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <fputc>
 760:	2a 94       	dec	r2
 762:	f6 cf       	rjmp	.-20     	; 0x750 <__EEPROM_REGION_LENGTH__+0x350>
 764:	f6 01       	movw	r30, r12
 766:	86 81       	ldd	r24, Z+6	; 0x06
 768:	97 81       	ldd	r25, Z+7	; 0x07
 76a:	02 c0       	rjmp	.+4      	; 0x770 <__EEPROM_REGION_LENGTH__+0x370>
 76c:	8f ef       	ldi	r24, 0xFF	; 255
 76e:	9f ef       	ldi	r25, 0xFF	; 255
 770:	2b 96       	adiw	r28, 0x0b	; 11
 772:	e2 e1       	ldi	r30, 0x12	; 18
 774:	0c 94 88 04 	jmp	0x910	; 0x910 <__epilogue_restores__>

00000778 <strnlen_P>:
 778:	fc 01       	movw	r30, r24
 77a:	05 90       	lpm	r0, Z+
 77c:	61 50       	subi	r22, 0x01	; 1
 77e:	70 40       	sbci	r23, 0x00	; 0
 780:	01 10       	cpse	r0, r1
 782:	d8 f7       	brcc	.-10     	; 0x77a <strnlen_P+0x2>
 784:	80 95       	com	r24
 786:	90 95       	com	r25
 788:	8e 0f       	add	r24, r30
 78a:	9f 1f       	adc	r25, r31
 78c:	08 95       	ret

0000078e <strnlen>:
 78e:	fc 01       	movw	r30, r24
 790:	61 50       	subi	r22, 0x01	; 1
 792:	70 40       	sbci	r23, 0x00	; 0
 794:	01 90       	ld	r0, Z+
 796:	01 10       	cpse	r0, r1
 798:	d8 f7       	brcc	.-10     	; 0x790 <strnlen+0x2>
 79a:	80 95       	com	r24
 79c:	90 95       	com	r25
 79e:	8e 0f       	add	r24, r30
 7a0:	9f 1f       	adc	r25, r31
 7a2:	08 95       	ret

000007a4 <fputc>:
 7a4:	0f 93       	push	r16
 7a6:	1f 93       	push	r17
 7a8:	cf 93       	push	r28
 7aa:	df 93       	push	r29
 7ac:	fb 01       	movw	r30, r22
 7ae:	23 81       	ldd	r18, Z+3	; 0x03
 7b0:	21 fd       	sbrc	r18, 1
 7b2:	03 c0       	rjmp	.+6      	; 0x7ba <fputc+0x16>
 7b4:	8f ef       	ldi	r24, 0xFF	; 255
 7b6:	9f ef       	ldi	r25, 0xFF	; 255
 7b8:	2c c0       	rjmp	.+88     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 7ba:	22 ff       	sbrs	r18, 2
 7bc:	16 c0       	rjmp	.+44     	; 0x7ea <fputc+0x46>
 7be:	46 81       	ldd	r20, Z+6	; 0x06
 7c0:	57 81       	ldd	r21, Z+7	; 0x07
 7c2:	24 81       	ldd	r18, Z+4	; 0x04
 7c4:	35 81       	ldd	r19, Z+5	; 0x05
 7c6:	42 17       	cp	r20, r18
 7c8:	53 07       	cpc	r21, r19
 7ca:	44 f4       	brge	.+16     	; 0x7dc <fputc+0x38>
 7cc:	a0 81       	ld	r26, Z
 7ce:	b1 81       	ldd	r27, Z+1	; 0x01
 7d0:	9d 01       	movw	r18, r26
 7d2:	2f 5f       	subi	r18, 0xFF	; 255
 7d4:	3f 4f       	sbci	r19, 0xFF	; 255
 7d6:	31 83       	std	Z+1, r19	; 0x01
 7d8:	20 83       	st	Z, r18
 7da:	8c 93       	st	X, r24
 7dc:	26 81       	ldd	r18, Z+6	; 0x06
 7de:	37 81       	ldd	r19, Z+7	; 0x07
 7e0:	2f 5f       	subi	r18, 0xFF	; 255
 7e2:	3f 4f       	sbci	r19, 0xFF	; 255
 7e4:	37 83       	std	Z+7, r19	; 0x07
 7e6:	26 83       	std	Z+6, r18	; 0x06
 7e8:	14 c0       	rjmp	.+40     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 7ea:	8b 01       	movw	r16, r22
 7ec:	ec 01       	movw	r28, r24
 7ee:	fb 01       	movw	r30, r22
 7f0:	00 84       	ldd	r0, Z+8	; 0x08
 7f2:	f1 85       	ldd	r31, Z+9	; 0x09
 7f4:	e0 2d       	mov	r30, r0
 7f6:	09 95       	icall
 7f8:	89 2b       	or	r24, r25
 7fa:	e1 f6       	brne	.-72     	; 0x7b4 <fputc+0x10>
 7fc:	d8 01       	movw	r26, r16
 7fe:	16 96       	adiw	r26, 0x06	; 6
 800:	8d 91       	ld	r24, X+
 802:	9c 91       	ld	r25, X
 804:	17 97       	sbiw	r26, 0x07	; 7
 806:	01 96       	adiw	r24, 0x01	; 1
 808:	17 96       	adiw	r26, 0x07	; 7
 80a:	9c 93       	st	X, r25
 80c:	8e 93       	st	-X, r24
 80e:	16 97       	sbiw	r26, 0x06	; 6
 810:	ce 01       	movw	r24, r28
 812:	df 91       	pop	r29
 814:	cf 91       	pop	r28
 816:	1f 91       	pop	r17
 818:	0f 91       	pop	r16
 81a:	08 95       	ret

0000081c <__ultoa_invert>:
 81c:	fa 01       	movw	r30, r20
 81e:	aa 27       	eor	r26, r26
 820:	28 30       	cpi	r18, 0x08	; 8
 822:	51 f1       	breq	.+84     	; 0x878 <__ultoa_invert+0x5c>
 824:	20 31       	cpi	r18, 0x10	; 16
 826:	81 f1       	breq	.+96     	; 0x888 <__ultoa_invert+0x6c>
 828:	e8 94       	clt
 82a:	6f 93       	push	r22
 82c:	6e 7f       	andi	r22, 0xFE	; 254
 82e:	6e 5f       	subi	r22, 0xFE	; 254
 830:	7f 4f       	sbci	r23, 0xFF	; 255
 832:	8f 4f       	sbci	r24, 0xFF	; 255
 834:	9f 4f       	sbci	r25, 0xFF	; 255
 836:	af 4f       	sbci	r26, 0xFF	; 255
 838:	b1 e0       	ldi	r27, 0x01	; 1
 83a:	3e d0       	rcall	.+124    	; 0x8b8 <__ultoa_invert+0x9c>
 83c:	b4 e0       	ldi	r27, 0x04	; 4
 83e:	3c d0       	rcall	.+120    	; 0x8b8 <__ultoa_invert+0x9c>
 840:	67 0f       	add	r22, r23
 842:	78 1f       	adc	r23, r24
 844:	89 1f       	adc	r24, r25
 846:	9a 1f       	adc	r25, r26
 848:	a1 1d       	adc	r26, r1
 84a:	68 0f       	add	r22, r24
 84c:	79 1f       	adc	r23, r25
 84e:	8a 1f       	adc	r24, r26
 850:	91 1d       	adc	r25, r1
 852:	a1 1d       	adc	r26, r1
 854:	6a 0f       	add	r22, r26
 856:	71 1d       	adc	r23, r1
 858:	81 1d       	adc	r24, r1
 85a:	91 1d       	adc	r25, r1
 85c:	a1 1d       	adc	r26, r1
 85e:	20 d0       	rcall	.+64     	; 0x8a0 <__ultoa_invert+0x84>
 860:	09 f4       	brne	.+2      	; 0x864 <__ultoa_invert+0x48>
 862:	68 94       	set
 864:	3f 91       	pop	r19
 866:	2a e0       	ldi	r18, 0x0A	; 10
 868:	26 9f       	mul	r18, r22
 86a:	11 24       	eor	r1, r1
 86c:	30 19       	sub	r19, r0
 86e:	30 5d       	subi	r19, 0xD0	; 208
 870:	31 93       	st	Z+, r19
 872:	de f6       	brtc	.-74     	; 0x82a <__ultoa_invert+0xe>
 874:	cf 01       	movw	r24, r30
 876:	08 95       	ret
 878:	46 2f       	mov	r20, r22
 87a:	47 70       	andi	r20, 0x07	; 7
 87c:	40 5d       	subi	r20, 0xD0	; 208
 87e:	41 93       	st	Z+, r20
 880:	b3 e0       	ldi	r27, 0x03	; 3
 882:	0f d0       	rcall	.+30     	; 0x8a2 <__ultoa_invert+0x86>
 884:	c9 f7       	brne	.-14     	; 0x878 <__ultoa_invert+0x5c>
 886:	f6 cf       	rjmp	.-20     	; 0x874 <__ultoa_invert+0x58>
 888:	46 2f       	mov	r20, r22
 88a:	4f 70       	andi	r20, 0x0F	; 15
 88c:	40 5d       	subi	r20, 0xD0	; 208
 88e:	4a 33       	cpi	r20, 0x3A	; 58
 890:	18 f0       	brcs	.+6      	; 0x898 <__ultoa_invert+0x7c>
 892:	49 5d       	subi	r20, 0xD9	; 217
 894:	31 fd       	sbrc	r19, 1
 896:	40 52       	subi	r20, 0x20	; 32
 898:	41 93       	st	Z+, r20
 89a:	02 d0       	rcall	.+4      	; 0x8a0 <__ultoa_invert+0x84>
 89c:	a9 f7       	brne	.-22     	; 0x888 <__ultoa_invert+0x6c>
 89e:	ea cf       	rjmp	.-44     	; 0x874 <__ultoa_invert+0x58>
 8a0:	b4 e0       	ldi	r27, 0x04	; 4
 8a2:	a6 95       	lsr	r26
 8a4:	97 95       	ror	r25
 8a6:	87 95       	ror	r24
 8a8:	77 95       	ror	r23
 8aa:	67 95       	ror	r22
 8ac:	ba 95       	dec	r27
 8ae:	c9 f7       	brne	.-14     	; 0x8a2 <__ultoa_invert+0x86>
 8b0:	00 97       	sbiw	r24, 0x00	; 0
 8b2:	61 05       	cpc	r22, r1
 8b4:	71 05       	cpc	r23, r1
 8b6:	08 95       	ret
 8b8:	9b 01       	movw	r18, r22
 8ba:	ac 01       	movw	r20, r24
 8bc:	0a 2e       	mov	r0, r26
 8be:	06 94       	lsr	r0
 8c0:	57 95       	ror	r21
 8c2:	47 95       	ror	r20
 8c4:	37 95       	ror	r19
 8c6:	27 95       	ror	r18
 8c8:	ba 95       	dec	r27
 8ca:	c9 f7       	brne	.-14     	; 0x8be <__ultoa_invert+0xa2>
 8cc:	62 0f       	add	r22, r18
 8ce:	73 1f       	adc	r23, r19
 8d0:	84 1f       	adc	r24, r20
 8d2:	95 1f       	adc	r25, r21
 8d4:	a0 1d       	adc	r26, r0
 8d6:	08 95       	ret

000008d8 <__prologue_saves__>:
 8d8:	2f 92       	push	r2
 8da:	3f 92       	push	r3
 8dc:	4f 92       	push	r4
 8de:	5f 92       	push	r5
 8e0:	6f 92       	push	r6
 8e2:	7f 92       	push	r7
 8e4:	8f 92       	push	r8
 8e6:	9f 92       	push	r9
 8e8:	af 92       	push	r10
 8ea:	bf 92       	push	r11
 8ec:	cf 92       	push	r12
 8ee:	df 92       	push	r13
 8f0:	ef 92       	push	r14
 8f2:	ff 92       	push	r15
 8f4:	0f 93       	push	r16
 8f6:	1f 93       	push	r17
 8f8:	cf 93       	push	r28
 8fa:	df 93       	push	r29
 8fc:	cd b7       	in	r28, 0x3d	; 61
 8fe:	de b7       	in	r29, 0x3e	; 62
 900:	ca 1b       	sub	r28, r26
 902:	db 0b       	sbc	r29, r27
 904:	0f b6       	in	r0, 0x3f	; 63
 906:	f8 94       	cli
 908:	de bf       	out	0x3e, r29	; 62
 90a:	0f be       	out	0x3f, r0	; 63
 90c:	cd bf       	out	0x3d, r28	; 61
 90e:	09 94       	ijmp

00000910 <__epilogue_restores__>:
 910:	2a 88       	ldd	r2, Y+18	; 0x12
 912:	39 88       	ldd	r3, Y+17	; 0x11
 914:	48 88       	ldd	r4, Y+16	; 0x10
 916:	5f 84       	ldd	r5, Y+15	; 0x0f
 918:	6e 84       	ldd	r6, Y+14	; 0x0e
 91a:	7d 84       	ldd	r7, Y+13	; 0x0d
 91c:	8c 84       	ldd	r8, Y+12	; 0x0c
 91e:	9b 84       	ldd	r9, Y+11	; 0x0b
 920:	aa 84       	ldd	r10, Y+10	; 0x0a
 922:	b9 84       	ldd	r11, Y+9	; 0x09
 924:	c8 84       	ldd	r12, Y+8	; 0x08
 926:	df 80       	ldd	r13, Y+7	; 0x07
 928:	ee 80       	ldd	r14, Y+6	; 0x06
 92a:	fd 80       	ldd	r15, Y+5	; 0x05
 92c:	0c 81       	ldd	r16, Y+4	; 0x04
 92e:	1b 81       	ldd	r17, Y+3	; 0x03
 930:	aa 81       	ldd	r26, Y+2	; 0x02
 932:	b9 81       	ldd	r27, Y+1	; 0x01
 934:	ce 0f       	add	r28, r30
 936:	d1 1d       	adc	r29, r1
 938:	0f b6       	in	r0, 0x3f	; 63
 93a:	f8 94       	cli
 93c:	de bf       	out	0x3e, r29	; 62
 93e:	0f be       	out	0x3f, r0	; 63
 940:	cd bf       	out	0x3d, r28	; 61
 942:	ed 01       	movw	r28, r26
 944:	08 95       	ret

00000946 <_exit>:
 946:	f8 94       	cli

00000948 <__stop_program>:
 948:	ff cf       	rjmp	.-2      	; 0x948 <__stop_program>
