
ATmega32_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000023c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000095a  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007aa  00000000  00000000  00000c46  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004f6  00000000  00000000  000013f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  000018e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000491  00000000  00000000  00001990  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000013f  00000000  00000000  00001e21  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001f60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 46 00 	call	0x8c	; 0x8c <main>
  78:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <initLED>:
#define Slave_Address    0x20
#define LED_PIN PB0 // Utilisez la broche PB0 pour la LED (personnalisez selon votre configuration matérielle)

void initLED() {
	// Configure la broche de la LED comme sortie
	DDRB |= (1 << LED_PIN);
  80:	20 9a       	sbi	0x04, 0	; 4
  82:	08 95       	ret

00000084 <turnOnLED>:
}

void turnOnLED() {
	// Allume la LED en mettant la broche à l'état bas (0)
	PORTB &= ~(1 << LED_PIN);
  84:	28 98       	cbi	0x05, 0	; 5
  86:	08 95       	ret

00000088 <turnOffLED>:
}

void turnOffLED() {
	// Éteint la LED en mettant la broche à l'état haut (1)
	PORTB |= (1 << LED_PIN);
  88:	28 9a       	sbi	0x05, 0	; 5
  8a:	08 95       	ret

0000008c <main>:
}

int main(void) {
	initLED(); // Initialise la LED
  8c:	0e 94 40 00 	call	0x80	; 0x80 <initLED>
	I2C_Slave_Init(Slave_Address);
  90:	80 e2       	ldi	r24, 0x20	; 32
  92:	0e 94 6e 00 	call	0xdc	; 0xdc <I2C_Slave_Init>
	// Activer les interruptions
	sei();
  96:	78 94       	sei

	while (1) {
		switch (I2C_Slave_Listen()) {
  98:	0e 94 74 00 	call	0xe8	; 0xe8 <I2C_Slave_Listen>
  9c:	88 23       	and	r24, r24
  9e:	19 f0       	breq	.+6      	; 0xa6 <main+0x1a>
  a0:	81 30       	cpi	r24, 0x01	; 1
  a2:	99 f0       	breq	.+38     	; 0xca <main+0x3e>
  a4:	18 c0       	rjmp	.+48     	; 0xd6 <main+0x4a>
			case 0: {
				// Réception de données
				int8_t count = 0;

				do {
					count = I2C_Slave_Receive();				 // Receive data byte 
  a6:	0e 94 b8 00 	call	0x170	; 0x170 <I2C_Slave_Receive>
					} while (count != -1);						// Receive until STOP/REPEATED START received 
  aa:	8f 3f       	cpi	r24, 0xFF	; 255
  ac:	e1 f7       	brne	.-8      	; 0xa6 <main+0x1a>

					// Allumer la LED lors de la réception
					turnOnLED();
  ae:	0e 94 42 00 	call	0x84	; 0x84 <turnOnLED>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	2f ef       	ldi	r18, 0xFF	; 255
  b4:	80 e7       	ldi	r24, 0x70	; 112
  b6:	92 e0       	ldi	r25, 0x02	; 2
  b8:	21 50       	subi	r18, 0x01	; 1
  ba:	80 40       	sbci	r24, 0x00	; 0
  bc:	90 40       	sbci	r25, 0x00	; 0
  be:	e1 f7       	brne	.-8      	; 0xb8 <main+0x2c>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <main+0x36>
  c2:	00 00       	nop
					_delay_ms(100);					// Allumée pendant 0.1 seconde
					turnOffLED();
  c4:	0e 94 44 00 	call	0x88	; 0x88 <turnOffLED>
					break;
  c8:	e7 cf       	rjmp	.-50     	; 0x98 <main+0xc>
				}
				case 1: {
					int8_t Ack_status;

					do {
						Ack_status = I2C_Slave_Transmit(0);					// Send 0 as acknowledgment 
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	0e 94 8f 00 	call	0x11e	; 0x11e <I2C_Slave_Transmit>
						} while (Ack_status == 0);				// Send until Acknowledgment is received 
  d0:	88 23       	and	r24, r24
  d2:	d9 f3       	breq	.-10     	; 0xca <main+0x3e>
  d4:	e1 cf       	rjmp	.-62     	; 0x98 <main+0xc>
						break;
					}
					default:
					// Aucune donnée reçue, éteignez la LED
					turnOffLED();
  d6:	0e 94 44 00 	call	0x88	; 0x88 <turnOffLED>
					break;
  da:	de cf       	rjmp	.-68     	; 0x98 <main+0xc>

000000dc <I2C_Slave_Init>:
  dc:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
  e0:	84 ec       	ldi	r24, 0xC4	; 196
  e2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  e6:	08 95       	ret

000000e8 <I2C_Slave_Listen>:
  e8:	ec eb       	ldi	r30, 0xBC	; 188
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	a9 eb       	ldi	r26, 0xB9	; 185
  ee:	b0 e0       	ldi	r27, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	88 23       	and	r24, r24
  f4:	ec f7       	brge	.-6      	; 0xf0 <I2C_Slave_Listen+0x8>
  f6:	8c 91       	ld	r24, X
  f8:	98 2f       	mov	r25, r24
  fa:	98 7f       	andi	r25, 0xF8	; 248
  fc:	80 7f       	andi	r24, 0xF0	; 240
  fe:	80 36       	cpi	r24, 0x60	; 96
 100:	41 f0       	breq	.+16     	; 0x112 <I2C_Slave_Listen+0x2a>
 102:	98 3a       	cpi	r25, 0xA8	; 168
 104:	41 f0       	breq	.+16     	; 0x116 <I2C_Slave_Listen+0x2e>
 106:	90 3b       	cpi	r25, 0xB0	; 176
 108:	41 f0       	breq	.+16     	; 0x11a <I2C_Slave_Listen+0x32>
 10a:	80 37       	cpi	r24, 0x70	; 112
 10c:	89 f7       	brne	.-30     	; 0xf0 <I2C_Slave_Listen+0x8>
 10e:	82 e0       	ldi	r24, 0x02	; 2
 110:	08 95       	ret
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	08 95       	ret
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	08 95       	ret
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	08 95       	ret

0000011e <I2C_Slave_Transmit>:
 11e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 122:	84 ec       	ldi	r24, 0xC4	; 196
 124:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 128:	ec eb       	ldi	r30, 0xBC	; 188
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	88 23       	and	r24, r24
 130:	ec f7       	brge	.-6      	; 0x12c <I2C_Slave_Transmit+0xe>
 132:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 136:	88 7f       	andi	r24, 0xF8	; 248
 138:	80 3a       	cpi	r24, 0xA0	; 160
 13a:	39 f4       	brne	.+14     	; 0x14a <I2C_Slave_Transmit+0x2c>
 13c:	ec eb       	ldi	r30, 0xBC	; 188
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	80 68       	ori	r24, 0x80	; 128
 144:	80 83       	st	Z, r24
 146:	8f ef       	ldi	r24, 0xFF	; 255
 148:	08 95       	ret
 14a:	88 3b       	cpi	r24, 0xB8	; 184
 14c:	69 f0       	breq	.+26     	; 0x168 <I2C_Slave_Transmit+0x4a>
 14e:	80 3c       	cpi	r24, 0xC0	; 192
 150:	39 f4       	brne	.+14     	; 0x160 <I2C_Slave_Transmit+0x42>
 152:	ec eb       	ldi	r30, 0xBC	; 188
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	80 68       	ori	r24, 0x80	; 128
 15a:	80 83       	st	Z, r24
 15c:	8e ef       	ldi	r24, 0xFE	; 254
 15e:	08 95       	ret
 160:	88 3c       	cpi	r24, 0xC8	; 200
 162:	21 f0       	breq	.+8      	; 0x16c <I2C_Slave_Transmit+0x4e>
 164:	8c ef       	ldi	r24, 0xFC	; 252
 166:	08 95       	ret
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	08 95       	ret
 16c:	8d ef       	ldi	r24, 0xFD	; 253
 16e:	08 95       	ret

00000170 <I2C_Slave_Receive>:
 170:	84 ec       	ldi	r24, 0xC4	; 196
 172:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 176:	ec eb       	ldi	r30, 0xBC	; 188
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	80 81       	ld	r24, Z
 17c:	88 23       	and	r24, r24
 17e:	ec f7       	brge	.-6      	; 0x17a <I2C_Slave_Receive+0xa>
 180:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 184:	98 2f       	mov	r25, r24
 186:	98 7e       	andi	r25, 0xE8	; 232
 188:	90 38       	cpi	r25, 0x80	; 128
 18a:	19 f4       	brne	.+6      	; 0x192 <I2C_Slave_Receive+0x22>
 18c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 190:	08 95       	ret
 192:	98 38       	cpi	r25, 0x88	; 136
 194:	19 f4       	brne	.+6      	; 0x19c <I2C_Slave_Receive+0x2c>
 196:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 19a:	08 95       	ret
 19c:	88 7f       	andi	r24, 0xF8	; 248
 19e:	80 3a       	cpi	r24, 0xA0	; 160
 1a0:	39 f4       	brne	.+14     	; 0x1b0 <I2C_Slave_Receive+0x40>
 1a2:	ec eb       	ldi	r30, 0xBC	; 188
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	80 81       	ld	r24, Z
 1a8:	80 68       	ori	r24, 0x80	; 128
 1aa:	80 83       	st	Z, r24
 1ac:	8f ef       	ldi	r24, 0xFF	; 255
 1ae:	08 95       	ret
 1b0:	8e ef       	ldi	r24, 0xFE	; 254
 1b2:	08 95       	ret

000001b4 <_exit>:
 1b4:	f8 94       	cli

000001b6 <__stop_program>:
 1b6:	ff cf       	rjmp	.-2      	; 0x1b6 <__stop_program>
