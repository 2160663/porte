
spimaster1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000156  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000102  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000156  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000188  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000088d  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000073e  00000000  00000000  00000a8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f7  00000000  00000000  000011cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000014c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000462  00000000  00000000  00001518  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ab  00000000  00000000  0000197a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001a25  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 54 00 	call	0xa8	; 0xa8 <main>
  78:	0c 94 7f 00 	jmp	0xfe	; 0xfe <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <_Z14SPI_MasterInitv>:
#define SLAVE_ADDRESS 0x02

void SPI_MasterInit(void)
{
	/* Configure les broches SS, MOSI et SCK en tant que sorties */
	DDRB |= (1 << PB2) | (1 << PB3) | (1 << PB5);
  80:	84 b1       	in	r24, 0x04	; 4
  82:	8c 62       	ori	r24, 0x2C	; 44
  84:	84 b9       	out	0x04, r24	; 4

	/* Active le SPI, configure-le en mode maître et définis la fréquence de l'horloge à fck/16 */
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0);
  86:	81 e5       	ldi	r24, 0x51	; 81
  88:	8c bd       	out	0x2c, r24	; 44
  8a:	08 95       	ret

0000008c <_Z15SPI_SelectSlaveh>:
}

void SPI_SelectSlave(uint8_t address)
{
	/* Désactive tous les esclaves */
	PORTB |= (1 << PB2) | (1 << PB3) | (1 << PB5);
  8c:	95 b1       	in	r25, 0x05	; 5
  8e:	9c 62       	ori	r25, 0x2C	; 44
  90:	95 b9       	out	0x05, r25	; 5

	/* Sélectionne l'esclave en fonction de son adresse */
	switch (address)
  92:	82 30       	cpi	r24, 0x02	; 2
  94:	19 f4       	brne	.+6      	; 0x9c <_Z15SPI_SelectSlaveh+0x10>
	{
		case 0x02:
		PORTB &= ~(1 << PB2); // Activer Slave SS=0 (adresse de l'esclave)
  96:	85 b1       	in	r24, 0x05	; 5
  98:	8b 7f       	andi	r24, 0xFB	; 251
  9a:	85 b9       	out	0x05, r24	; 5
  9c:	08 95       	ret

0000009e <_Z12SPI_Transmith>:
}

void SPI_Transmit(uint8_t data)
{
	/* Transmettre des données via SPI */
	SPDR = data;
  9e:	8e bd       	out	0x2e, r24	; 46

	/* Attendre la fin de la transmission */
	while (!(SPSR & (1 << SPIF)));
  a0:	0d b4       	in	r0, 0x2d	; 45
  a2:	07 fe       	sbrs	r0, 7
  a4:	fd cf       	rjmp	.-6      	; 0xa0 <_Z12SPI_Transmith+0x2>
}
  a6:	08 95       	ret

000000a8 <main>:
int main(void)
{
	 uint8_t donnees;

	 // Bouton Poussoir sur PC0, Activer résistance de Rappel
	 DDRC &= ~(1 << PC0); // PC0 comme entrée
  a8:	87 b1       	in	r24, 0x07	; 7
  aa:	8e 7f       	andi	r24, 0xFE	; 254
  ac:	87 b9       	out	0x07, r24	; 7
	 PORTC |= (1 << PC0); // Activer la résistance de rappel
  ae:	88 b1       	in	r24, 0x08	; 8
  b0:	81 60       	ori	r24, 0x01	; 1
  b2:	88 b9       	out	0x08, r24	; 8
	 
	SPI_MasterInit();
  b4:	0e 94 40 00 	call	0x80	; 0x80 <_Z14SPI_MasterInitv>

	while (1)
	{
		
		if (bit_is_clear(PINC, PC0)){
  b8:	30 99       	sbic	0x06, 0	; 6
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <main+0x18>
		donnees = 0x01; // Si bouton appuyé, envoyer 0x01
  bc:	c1 e0       	ldi	r28, 0x01	; 1
  be:	01 c0       	rjmp	.+2      	; 0xc2 <main+0x1a>
		}
		
		else{
		donnees = 0x00; // Sinon, envoyer 0x00
  c0:	c0 e0       	ldi	r28, 0x00	; 0
		}
		
		// Sélectionner l'esclave en utilisant son adresse (0x02 dans cet exemple)
		SPI_SelectSlave(SLAVE_ADDRESS);
  c2:	82 e0       	ldi	r24, 0x02	; 2
  c4:	0e 94 46 00 	call	0x8c	; 0x8c <_Z15SPI_SelectSlaveh>
		PORTB &= ~(1 << PB2);
  c8:	85 b1       	in	r24, 0x05	; 5
  ca:	8b 7f       	andi	r24, 0xFB	; 251
  cc:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	2d e0       	ldi	r18, 0x0D	; 13
  d0:	2a 95       	dec	r18
  d2:	f1 f7       	brne	.-4      	; 0xd0 <main+0x28>
  d4:	00 00       	nop
		_delay_us(5);

		// Envoyer des données à l'esclave
		//uint8_t sendData = 0xAA; // Exemple de données à envoyer
		SPI_Transmit(donnees);
  d6:	8c 2f       	mov	r24, r28
  d8:	0e 94 4f 00 	call	0x9e	; 0x9e <_Z12SPI_Transmith>
  dc:	8d e0       	ldi	r24, 0x0D	; 13
  de:	8a 95       	dec	r24
  e0:	f1 f7       	brne	.-4      	; 0xde <main+0x36>
  e2:	00 00       	nop
		_delay_us(5);

		// Désélectionner l'esclave
		PORTB |= (1 << PB2); // Désactiver Slave SS=1
  e4:	85 b1       	in	r24, 0x05	; 5
  e6:	84 60       	ori	r24, 0x04	; 4
  e8:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ea:	9f ef       	ldi	r25, 0xFF	; 255
  ec:	29 e6       	ldi	r18, 0x69	; 105
  ee:	88 e1       	ldi	r24, 0x18	; 24
  f0:	91 50       	subi	r25, 0x01	; 1
  f2:	20 40       	sbci	r18, 0x00	; 0
  f4:	80 40       	sbci	r24, 0x00	; 0
  f6:	e1 f7       	brne	.-8      	; 0xf0 <main+0x48>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <main+0x52>
  fa:	00 00       	nop
  fc:	dd cf       	rjmp	.-70     	; 0xb8 <main+0x10>

000000fe <_exit>:
  fe:	f8 94       	cli

00000100 <__stop_program>:
 100:	ff cf       	rjmp	.-2      	; 0x100 <__stop_program>
