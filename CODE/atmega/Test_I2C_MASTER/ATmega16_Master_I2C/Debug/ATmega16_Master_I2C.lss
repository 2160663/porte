
ATmega16_Master_I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000018e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001e2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000214  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a25  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007b6  00000000  00000000  00000d11  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000636  00000000  00000000  000014c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000128  00000000  00000000  00001b00  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000537  00000000  00000000  00001c28  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002c7  00000000  00000000  0000215f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00002426  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4a 00 	call	0x94	; 0x94 <main>
  78:	0c 94 c5 00 	jmp	0x18a	; 0x18a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <initLED>:
#define LED_PIN PB0 // Utilisez la broche PB0 pour la LED
#define SENSOR_PIN PC0 // Utilisez la broche PC0 pour le capteur magnétique

void initLED() {
	// Configure la broche de la LED comme sortie
	DDRB |= (1 << LED_PIN);
  80:	20 9a       	sbi	0x04, 0	; 4
  82:	08 95       	ret

00000084 <isWindowOpen>:
}

int isWindowOpen() {
	// Lisez l'état du capteur magnétique (fenêtre ouverte/fermée)
	if (PINC & (1 << SENSOR_PIN)) {
  84:	86 b1       	in	r24, 0x06	; 6
		return 1; // Fenêtre ouverte
		} else {
		return 0; // Fenêtre fermée
	}
}
  86:	81 70       	andi	r24, 0x01	; 1
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	08 95       	ret

0000008c <turnOnLED>:

void turnOnLED() {
	// Allume la LED en mettant la broche à l'état bas (0)
	PORTB &= ~(1 << LED_PIN);
  8c:	28 98       	cbi	0x05, 0	; 5
  8e:	08 95       	ret

00000090 <turnOffLED>:
}

void turnOffLED() {
	// Éteint la LED en mettant la broche à l'état haut (1)
	PORTB |= (1 << LED_PIN);
  90:	28 9a       	sbi	0x05, 0	; 5
  92:	08 95       	ret

00000094 <main>:
}

int main(void) {
	char dataToSend = 'A'; // Donnée à envoyer

	I2C_Init();                         // Initialize I2C
  94:	0e 94 79 00 	call	0xf2	; 0xf2 <I2C_Init>
	initLED();                          // Initialise la LED
  98:	0e 94 40 00 	call	0x80	; 0x80 <initLED>

	// Configure la broche du capteur magnétique comme entrée
	DDRC &= ~(1 << SENSOR_PIN);
  9c:	38 98       	cbi	0x07, 0	; 7
	PORTC |= (1 << SENSOR_PIN); // Activer la résistance de rappel interne
  9e:	40 9a       	sbi	0x08, 0	; 8

	while (1) {
		// Vérifiez l'état du capteur magnétique
		if (isWindowOpen()) {
  a0:	0e 94 42 00 	call	0x84	; 0x84 <isWindowOpen>
  a4:	89 2b       	or	r24, r25
  a6:	c9 f0       	breq	.+50     	; 0xda <main+0x46>
			// Allume la LED pour indiquer que la fenêtre est ouverte
			turnOnLED();
  a8:	0e 94 46 00 	call	0x8c	; 0x8c <turnOnLED>

			// Envoie la donnée via I2C
			I2C_Start(EEPROM_Write_Addess); // Start I2C with device write address
  ac:	80 e2       	ldi	r24, 0x20	; 32
  ae:	0e 94 7f 00 	call	0xfe	; 0xfe <I2C_Start>
			I2C_Write(0x20);               // Write start memory address for data write
  b2:	80 e2       	ldi	r24, 0x20	; 32
  b4:	0e 94 ae 00 	call	0x15c	; 0x15c <I2C_Write>
			I2C_Write(dataToSend);         // Envoie la donnée
  b8:	81 e4       	ldi	r24, 0x41	; 65
  ba:	0e 94 ae 00 	call	0x15c	; 0x15c <I2C_Write>
			I2C_Stop();                    // Stop I2C
  be:	0e 94 a5 00 	call	0x14a	; 0x14a <I2C_Stop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c2:	2f ef       	ldi	r18, 0xFF	; 255
  c4:	80 e7       	ldi	r24, 0x70	; 112
  c6:	92 e0       	ldi	r25, 0x02	; 2
  c8:	21 50       	subi	r18, 0x01	; 1
  ca:	80 40       	sbci	r24, 0x00	; 0
  cc:	90 40       	sbci	r25, 0x00	; 0
  ce:	e1 f7       	brne	.-8      	; 0xc8 <main+0x34>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <main+0x3e>
  d2:	00 00       	nop
			
			_delay_ms(100);
			turnOffLED();
  d4:	0e 94 48 00 	call	0x90	; 0x90 <turnOffLED>
  d8:	02 c0       	rjmp	.+4      	; 0xde <main+0x4a>
		} 
		else {
			// Éteint la LED si la fenêtre est fermée
			turnOffLED();
  da:	0e 94 48 00 	call	0x90	; 0x90 <turnOffLED>
  de:	2f ef       	ldi	r18, 0xFF	; 255
  e0:	84 e3       	ldi	r24, 0x34	; 52
  e2:	9c e0       	ldi	r25, 0x0C	; 12
  e4:	21 50       	subi	r18, 0x01	; 1
  e6:	80 40       	sbci	r24, 0x00	; 0
  e8:	90 40       	sbci	r25, 0x00	; 0
  ea:	e1 f7       	brne	.-8      	; 0xe4 <main+0x50>
  ec:	00 c0       	rjmp	.+0      	; 0xee <main+0x5a>
  ee:	00 00       	nop
  f0:	d7 cf       	rjmp	.-82     	; 0xa0 <main+0xc>

000000f2 <I2C_Init>:
  f2:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  f6:	80 e2       	ldi	r24, 0x20	; 32
  f8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
  fc:	08 95       	ret

000000fe <I2C_Start>:
  fe:	94 ea       	ldi	r25, 0xA4	; 164
 100:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 104:	ec eb       	ldi	r30, 0xBC	; 188
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	90 81       	ld	r25, Z
 10a:	99 23       	and	r25, r25
 10c:	ec f7       	brge	.-6      	; 0x108 <I2C_Start+0xa>
 10e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 112:	98 7f       	andi	r25, 0xF8	; 248
 114:	98 30       	cpi	r25, 0x08	; 8
 116:	99 f4       	brne	.+38     	; 0x13e <I2C_Start+0x40>
 118:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 11c:	84 e8       	ldi	r24, 0x84	; 132
 11e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 122:	ec eb       	ldi	r30, 0xBC	; 188
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	88 23       	and	r24, r24
 12a:	ec f7       	brge	.-6      	; 0x126 <I2C_Start+0x28>
 12c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 130:	88 7f       	andi	r24, 0xF8	; 248
 132:	88 31       	cpi	r24, 0x18	; 24
 134:	31 f0       	breq	.+12     	; 0x142 <I2C_Start+0x44>
 136:	80 32       	cpi	r24, 0x20	; 32
 138:	31 f0       	breq	.+12     	; 0x146 <I2C_Start+0x48>
 13a:	83 e0       	ldi	r24, 0x03	; 3
 13c:	08 95       	ret
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	08 95       	ret
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	08 95       	ret
 146:	82 e0       	ldi	r24, 0x02	; 2
 148:	08 95       	ret

0000014a <I2C_Stop>:
 14a:	84 e9       	ldi	r24, 0x94	; 148
 14c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 150:	ec eb       	ldi	r30, 0xBC	; 188
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	84 fd       	sbrc	r24, 4
 158:	fd cf       	rjmp	.-6      	; 0x154 <I2C_Stop+0xa>
 15a:	08 95       	ret

0000015c <I2C_Write>:
 15c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 160:	84 e8       	ldi	r24, 0x84	; 132
 162:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 166:	ec eb       	ldi	r30, 0xBC	; 188
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	88 23       	and	r24, r24
 16e:	ec f7       	brge	.-6      	; 0x16a <I2C_Write+0xe>
 170:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 174:	88 7f       	andi	r24, 0xF8	; 248
 176:	88 32       	cpi	r24, 0x28	; 40
 178:	21 f0       	breq	.+8      	; 0x182 <I2C_Write+0x26>
 17a:	80 33       	cpi	r24, 0x30	; 48
 17c:	21 f0       	breq	.+8      	; 0x186 <I2C_Write+0x2a>
 17e:	82 e0       	ldi	r24, 0x02	; 2
 180:	08 95       	ret
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	08 95       	ret
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	08 95       	ret

0000018a <_exit>:
 18a:	f8 94       	cli

0000018c <__stop_program>:
 18c:	ff cf       	rjmp	.-2      	; 0x18c <__stop_program>
