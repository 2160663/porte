
ATmega16_Master_I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000338  000003ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000338  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003b6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d0  00000000  00000000  00000428  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e2c  00000000  00000000  000004f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000091c  00000000  00000000  00001324  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000895  00000000  00000000  00001c40  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001c4  00000000  00000000  000024d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000539  00000000  00000000  0000269c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000718  00000000  00000000  00002bd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  000032ed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e3       	ldi	r30, 0x38	; 56
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  8e:	0c 94 9a 01 	jmp	0x334	; 0x334 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <initLED>:

#define LED_PIN PB0 // Utilisez la broche PB0 pour la LED

void initLED() {
	// Configure la broche de la LED comme sortie
	DDRB |= (1 << LED_PIN);
  96:	20 9a       	sbi	0x04, 0	; 4
  98:	08 95       	ret

0000009a <turnOnLED>:
}

void turnOnLED() {
	// Allume la LED en mettant la broche à l'état bas (0)
	PORTB &= ~(1 << LED_PIN);
  9a:	28 98       	cbi	0x05, 0	; 5
  9c:	08 95       	ret

0000009e <turnOffLED>:
}

void turnOffLED() {
	// Éteint la LED en mettant la broche à l'état haut (1)
	PORTB |= (1 << LED_PIN);
  9e:	28 9a       	sbi	0x05, 0	; 5
  a0:	08 95       	ret

000000a2 <main>:
}

int main(void)
{
  a2:	cf 92       	push	r12
  a4:	df 92       	push	r13
  a6:	ef 92       	push	r14
  a8:	ff 92       	push	r15
  aa:	0f 93       	push	r16
  ac:	1f 93       	push	r17
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62
  b6:	2a 97       	sbiw	r28, 0x0a	; 10
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	f8 94       	cli
  bc:	de bf       	out	0x3e, r29	; 62
  be:	0f be       	out	0x3f, r0	; 63
  c0:	cd bf       	out	0x3d, r28	; 61
	char array[10] = "test";				/* Declare array to be print */
  c2:	85 e0       	ldi	r24, 0x05	; 5
  c4:	e0 e0       	ldi	r30, 0x00	; 0
  c6:	f1 e0       	ldi	r31, 0x01	; 1
  c8:	de 01       	movw	r26, r28
  ca:	11 96       	adiw	r26, 0x01	; 1
  cc:	01 90       	ld	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	8a 95       	dec	r24
  d2:	e1 f7       	brne	.-8      	; 0xcc <main+0x2a>
  d4:	fe 01       	movw	r30, r28
  d6:	36 96       	adiw	r30, 0x06	; 6
  d8:	85 e0       	ldi	r24, 0x05	; 5
  da:	df 01       	movw	r26, r30
  dc:	1d 92       	st	X+, r1
  de:	8a 95       	dec	r24
  e0:	e9 f7       	brne	.-6      	; 0xdc <main+0x3a>
	LCD_Init();								/* Initialize LCD */
  e2:	0e 94 84 01 	call	0x308	; 0x308 <LCD_Init>
	I2C_Init();								/* Initialize I2C */
  e6:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <I2C_Init>
	initLED();								// Initialise la LED
  ea:	0e 94 4b 00 	call	0x96	; 0x96 <initLED>
	
	I2C_Start(EEPROM_Write_Addess);			/* Start I2C with device write address */
  ee:	80 ea       	ldi	r24, 0xA0	; 160
  f0:	0e 94 df 00 	call	0x1be	; 0x1be <I2C_Start>
	I2C_Write(0x00);						/* Write start memory address for data write */
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	0e 94 34 01 	call	0x268	; 0x268 <I2C_Write>
  fa:	fe 01       	movw	r30, r28
  fc:	31 96       	adiw	r30, 0x01	; 1
  fe:	7f 01       	movw	r14, r30
	for (int i = 0; i<strlen(array); i++)	/* Write array data */
 100:	00 e0       	ldi	r16, 0x00	; 0
 102:	10 e0       	ldi	r17, 0x00	; 0
 104:	6f 01       	movw	r12, r30
 106:	07 c0       	rjmp	.+14     	; 0x116 <main+0x74>
		{
			I2C_Write(array[i]); 
 108:	d7 01       	movw	r26, r14
 10a:	8d 91       	ld	r24, X+
 10c:	7d 01       	movw	r14, r26
 10e:	0e 94 34 01 	call	0x268	; 0x268 <I2C_Write>
	I2C_Init();								/* Initialize I2C */
	initLED();								// Initialise la LED
	
	I2C_Start(EEPROM_Write_Addess);			/* Start I2C with device write address */
	I2C_Write(0x00);						/* Write start memory address for data write */
	for (int i = 0; i<strlen(array); i++)	/* Write array data */
 112:	0f 5f       	subi	r16, 0xFF	; 255
 114:	1f 4f       	sbci	r17, 0xFF	; 255
 116:	f6 01       	movw	r30, r12
 118:	01 90       	ld	r0, Z+
 11a:	00 20       	and	r0, r0
 11c:	e9 f7       	brne	.-6      	; 0x118 <main+0x76>
 11e:	31 97       	sbiw	r30, 0x01	; 1
 120:	ec 19       	sub	r30, r12
 122:	fd 09       	sbc	r31, r13
 124:	0e 17       	cp	r16, r30
 126:	1f 07       	cpc	r17, r31
 128:	78 f3       	brcs	.-34     	; 0x108 <main+0x66>
		{
			I2C_Write(array[i]); 
		}
	I2C_Stop();								/* Stop I2C */
 12a:	0e 94 2b 01 	call	0x256	; 0x256 <I2C_Stop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12e:	ef e1       	ldi	r30, 0x1F	; 31
 130:	fe e4       	ldi	r31, 0x4E	; 78
 132:	31 97       	sbiw	r30, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <main+0x90>
 136:	00 c0       	rjmp	.+0      	; 0x138 <main+0x96>
 138:	00 00       	nop
	_delay_ms(10);
	I2C_Start(EEPROM_Write_Addess);			/* Start I2C with device write address */
 13a:	80 ea       	ldi	r24, 0xA0	; 160
 13c:	0e 94 df 00 	call	0x1be	; 0x1be <I2C_Start>
	I2C_Write(0x00);						/* Write start memory address */
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	0e 94 34 01 	call	0x268	; 0x268 <I2C_Write>
	I2C_Repeated_Start(EEPROM_Read_Addess);	/* Repeat start I2C with device read address */
 146:	81 ea       	ldi	r24, 0xA1	; 161
 148:	0e 94 05 01 	call	0x20a	; 0x20a <I2C_Repeated_Start>
	
	for (int i = 0; i<strlen(array); i++)	/* Read data with acknowledgment(ack) */
 14c:	00 e0       	ldi	r16, 0x00	; 0
 14e:	10 e0       	ldi	r17, 0x00	; 0
 150:	ce 01       	movw	r24, r28
 152:	01 96       	adiw	r24, 0x01	; 1
 154:	6c 01       	movw	r12, r24
 156:	0c c0       	rjmp	.+24     	; 0x170 <main+0xce>
		{
			char receivedData = I2C_Read_Ack();
 158:	0e 94 4b 01 	call	0x296	; 0x296 <I2C_Read_Ack>
 15c:	f8 2e       	mov	r15, r24
			LCD_Char(receivedData);
 15e:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_Char>
			
			if (receivedData == 't') {
 162:	94 e7       	ldi	r25, 0x74	; 116
 164:	f9 12       	cpse	r15, r25
 166:	02 c0       	rjmp	.+4      	; 0x16c <main+0xca>
				// Si un caractère spécifique est envoyé (par exemple, 't'), allume la LED
				turnOnLED();
 168:	0e 94 4d 00 	call	0x9a	; 0x9a <turnOnLED>
	_delay_ms(10);
	I2C_Start(EEPROM_Write_Addess);			/* Start I2C with device write address */
	I2C_Write(0x00);						/* Write start memory address */
	I2C_Repeated_Start(EEPROM_Read_Addess);	/* Repeat start I2C with device read address */
	
	for (int i = 0; i<strlen(array); i++)	/* Read data with acknowledgment(ack) */
 16c:	0f 5f       	subi	r16, 0xFF	; 255
 16e:	1f 4f       	sbci	r17, 0xFF	; 255
 170:	f6 01       	movw	r30, r12
 172:	01 90       	ld	r0, Z+
 174:	00 20       	and	r0, r0
 176:	e9 f7       	brne	.-6      	; 0x172 <main+0xd0>
 178:	31 97       	sbiw	r30, 0x01	; 1
 17a:	ec 19       	sub	r30, r12
 17c:	fd 09       	sbc	r31, r13
 17e:	0e 17       	cp	r16, r30
 180:	1f 07       	cpc	r17, r31
 182:	50 f3       	brcs	.-44     	; 0x158 <main+0xb6>
			if (receivedData == 't') {
				// Si un caractère spécifique est envoyé (par exemple, 't'), allume la LED
				turnOnLED();
			}
		}
	I2C_Read_Nack();						/* Read flush data with nack */
 184:	0e 94 56 01 	call	0x2ac	; 0x2ac <I2C_Read_Nack>
	I2C_Stop();								/* Stop I2C */
 188:	0e 94 2b 01 	call	0x256	; 0x256 <I2C_Stop>
	
	turnOffLED();
 18c:	0e 94 4f 00 	call	0x9e	; 0x9e <turnOffLED>
	
	return 0;
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	2a 96       	adiw	r28, 0x0a	; 10
 196:	0f b6       	in	r0, 0x3f	; 63
 198:	f8 94       	cli
 19a:	de bf       	out	0x3e, r29	; 62
 19c:	0f be       	out	0x3f, r0	; 63
 19e:	cd bf       	out	0x3d, r28	; 61
 1a0:	df 91       	pop	r29
 1a2:	cf 91       	pop	r28
 1a4:	1f 91       	pop	r17
 1a6:	0f 91       	pop	r16
 1a8:	ff 90       	pop	r15
 1aa:	ef 90       	pop	r14
 1ac:	df 90       	pop	r13
 1ae:	cf 90       	pop	r12
 1b0:	08 95       	ret

000001b2 <I2C_Init>:
			I2C_Stop();										/* If not then generate stop condition */
			continue;										/* continue with start loop again */
		}
		break;												/* If yes then break loop */
	}
}
 1b2:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 1b6:	80 e2       	ldi	r24, 0x20	; 32
 1b8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 1bc:	08 95       	ret

000001be <I2C_Start>:
 1be:	94 ea       	ldi	r25, 0xA4	; 164
 1c0:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1c4:	ec eb       	ldi	r30, 0xBC	; 188
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	90 81       	ld	r25, Z
 1ca:	99 23       	and	r25, r25
 1cc:	ec f7       	brge	.-6      	; 0x1c8 <I2C_Start+0xa>
 1ce:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 1d2:	98 7f       	andi	r25, 0xF8	; 248
 1d4:	98 30       	cpi	r25, 0x08	; 8
 1d6:	99 f4       	brne	.+38     	; 0x1fe <I2C_Start+0x40>
 1d8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 1dc:	84 e8       	ldi	r24, 0x84	; 132
 1de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1e2:	ec eb       	ldi	r30, 0xBC	; 188
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	80 81       	ld	r24, Z
 1e8:	88 23       	and	r24, r24
 1ea:	ec f7       	brge	.-6      	; 0x1e6 <I2C_Start+0x28>
 1ec:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 1f0:	88 7f       	andi	r24, 0xF8	; 248
 1f2:	88 31       	cpi	r24, 0x18	; 24
 1f4:	31 f0       	breq	.+12     	; 0x202 <I2C_Start+0x44>
 1f6:	80 32       	cpi	r24, 0x20	; 32
 1f8:	31 f0       	breq	.+12     	; 0x206 <I2C_Start+0x48>
 1fa:	83 e0       	ldi	r24, 0x03	; 3
 1fc:	08 95       	ret
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	08 95       	ret
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	08 95       	ret
 206:	82 e0       	ldi	r24, 0x02	; 2
 208:	08 95       	ret

0000020a <I2C_Repeated_Start>:
 20a:	94 ea       	ldi	r25, 0xA4	; 164
 20c:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 210:	ec eb       	ldi	r30, 0xBC	; 188
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	90 81       	ld	r25, Z
 216:	99 23       	and	r25, r25
 218:	ec f7       	brge	.-6      	; 0x214 <I2C_Repeated_Start+0xa>
 21a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 21e:	98 7f       	andi	r25, 0xF8	; 248
 220:	90 31       	cpi	r25, 0x10	; 16
 222:	99 f4       	brne	.+38     	; 0x24a <I2C_Repeated_Start+0x40>
 224:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 228:	84 e8       	ldi	r24, 0x84	; 132
 22a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 22e:	ec eb       	ldi	r30, 0xBC	; 188
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	80 81       	ld	r24, Z
 234:	88 23       	and	r24, r24
 236:	ec f7       	brge	.-6      	; 0x232 <I2C_Repeated_Start+0x28>
 238:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 23c:	88 7f       	andi	r24, 0xF8	; 248
 23e:	80 34       	cpi	r24, 0x40	; 64
 240:	31 f0       	breq	.+12     	; 0x24e <I2C_Repeated_Start+0x44>
 242:	80 32       	cpi	r24, 0x20	; 32
 244:	31 f0       	breq	.+12     	; 0x252 <I2C_Repeated_Start+0x48>
 246:	83 e0       	ldi	r24, 0x03	; 3
 248:	08 95       	ret
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	08 95       	ret
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	08 95       	ret
 252:	82 e0       	ldi	r24, 0x02	; 2
 254:	08 95       	ret

00000256 <I2C_Stop>:
 256:	84 e9       	ldi	r24, 0x94	; 148
 258:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 25c:	ec eb       	ldi	r30, 0xBC	; 188
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	80 81       	ld	r24, Z
 262:	84 fd       	sbrc	r24, 4
 264:	fd cf       	rjmp	.-6      	; 0x260 <I2C_Stop+0xa>
 266:	08 95       	ret

00000268 <I2C_Write>:

uint8_t I2C_Write(char data)								/* I2C write function */
{
	uint8_t status;											/* Declare variable */
	TWDR = data;											/* Copy data in TWI data register */
 268:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
 26c:	84 e8       	ldi	r24, 0x84	; 132
 26e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
 272:	ec eb       	ldi	r30, 0xBC	; 188
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	80 81       	ld	r24, Z
 278:	88 23       	and	r24, r24
 27a:	ec f7       	brge	.-6      	; 0x276 <I2C_Write+0xe>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
 27c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 280:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
 282:	88 32       	cpi	r24, 0x28	; 40
 284:	21 f0       	breq	.+8      	; 0x28e <I2C_Write+0x26>
	return 0;												/* If yes then return 0 to indicate ack received */
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
 286:	80 33       	cpi	r24, 0x30	; 48
 288:	21 f0       	breq	.+8      	; 0x292 <I2C_Write+0x2a>
	return 1;												/* If yes then return 1 to indicate nack received */
	else
	return 2;												/* Else return 2 to indicate data transmission failed */
 28a:	82 e0       	ldi	r24, 0x02	; 2
 28c:	08 95       	ret
	TWDR = data;											/* Copy data in TWI data register */
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
	return 0;												/* If yes then return 0 to indicate ack received */
 28e:	80 e0       	ldi	r24, 0x00	; 0
 290:	08 95       	ret
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
	return 1;												/* If yes then return 1 to indicate nack received */
 292:	81 e0       	ldi	r24, 0x01	; 1
	else
	return 2;												/* Else return 2 to indicate data transmission failed */
}
 294:	08 95       	ret

00000296 <I2C_Read_Ack>:

char I2C_Read_Ack()											/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
 296:	84 ec       	ldi	r24, 0xC4	; 196
 298:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
 29c:	ec eb       	ldi	r30, 0xBC	; 188
 29e:	f0 e0       	ldi	r31, 0x00	; 0
 2a0:	80 81       	ld	r24, Z
 2a2:	88 23       	and	r24, r24
 2a4:	ec f7       	brge	.-6      	; 0x2a0 <I2C_Read_Ack+0xa>
	return TWDR;											/* Return received data */
 2a6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}	
 2aa:	08 95       	ret

000002ac <I2C_Read_Nack>:

char I2C_Read_Nack()										/* I2C read nack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT);								/* Enable TWI and clear interrupt flag */
 2ac:	84 e8       	ldi	r24, 0x84	; 132
 2ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
 2b2:	ec eb       	ldi	r30, 0xBC	; 188
 2b4:	f0 e0       	ldi	r31, 0x00	; 0
 2b6:	80 81       	ld	r24, Z
 2b8:	88 23       	and	r24, r24
 2ba:	ec f7       	brge	.-6      	; 0x2b6 <I2C_Read_Nack+0xa>
	return TWDR;											/* Return received data */
 2bc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}	
 2c0:	08 95       	ret

000002c2 <LCD_Command>:
#include "LCD_16x2_H_file.h"						/* Include LCD header file */


void LCD_Command (char cmd)							/* LCD command write function */
{
	LCD_Data_Port = cmd;							/* Write command data to LCD data port */	
 2c2:	85 b9       	out	0x05, r24	; 5
	LCD_Command_Port = (0<<RS)|(0<<RW)|(1<<EN);		/* Make rs LOW (command reg.), rw LOW (Write), en HIGH (Enable) */
 2c4:	84 e0       	ldi	r24, 0x04	; 4
 2c6:	88 b9       	out	0x08, r24	; 8
 2c8:	8f ec       	ldi	r24, 0xCF	; 207
 2ca:	97 e0       	ldi	r25, 0x07	; 7
 2cc:	01 97       	sbiw	r24, 0x01	; 1
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <LCD_Command+0xa>
 2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <LCD_Command+0x10>
 2d2:	00 00       	nop
	_delay_ms(1);									/* Wait a ms to enable pulse and data latch */
	LCD_Command_Port = (0<<RS)|(0<<RW)|(0<<EN);		/* Make rs LOW (command reg.), rw LOW (Write), en LOW (Disable) */
 2d4:	18 b8       	out	0x08, r1	; 8
 2d6:	8f e0       	ldi	r24, 0x0F	; 15
 2d8:	97 e2       	ldi	r25, 0x27	; 39
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	f1 f7       	brne	.-4      	; 0x2da <LCD_Command+0x18>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <LCD_Command+0x1e>
 2e0:	00 00       	nop
 2e2:	08 95       	ret

000002e4 <LCD_Char>:
	_delay_ms(5);									/* Wait little bit to get internal LCD data operation done */
}

void LCD_Char (char char_data)						/* LCD data write function */
{
	LCD_Data_Port = char_data;						/* Write data to LCD data port */
 2e4:	85 b9       	out	0x05, r24	; 5
	LCD_Command_Port = (1<<RS)|(0<<RW)|(1<<EN);		/* Make rs HIGH (data reg.), rw LOW (Write), en HIGH (Enable) */
 2e6:	84 e1       	ldi	r24, 0x14	; 20
 2e8:	88 b9       	out	0x08, r24	; 8
 2ea:	8f ec       	ldi	r24, 0xCF	; 207
 2ec:	97 e0       	ldi	r25, 0x07	; 7
 2ee:	01 97       	sbiw	r24, 0x01	; 1
 2f0:	f1 f7       	brne	.-4      	; 0x2ee <LCD_Char+0xa>
 2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <LCD_Char+0x10>
 2f4:	00 00       	nop
	_delay_ms(1);									/* Wait a ms to enable pulse and data latch */
	LCD_Command_Port = (1<<RS)|(0<<RW)|(0<<EN);		/* Make rs HIGH (data reg.), rw LOW (Write), en HIGH (Disable) */
 2f6:	80 e1       	ldi	r24, 0x10	; 16
 2f8:	88 b9       	out	0x08, r24	; 8
 2fa:	8f e0       	ldi	r24, 0x0F	; 15
 2fc:	97 e2       	ldi	r25, 0x27	; 39
 2fe:	01 97       	sbiw	r24, 0x01	; 1
 300:	f1 f7       	brne	.-4      	; 0x2fe <LCD_Char+0x1a>
 302:	00 c0       	rjmp	.+0      	; 0x304 <LCD_Char+0x20>
 304:	00 00       	nop
 306:	08 95       	ret

00000308 <LCD_Init>:
	_delay_ms(5);									/* Wait little bit to get internal LCD data operation done */
}

void LCD_Init (void)								/* LCD Initialize function */
{
	LCD_Command_Dir = 0xFF;							/* Make LCD command port direction as o/p */
 308:	8f ef       	ldi	r24, 0xFF	; 255
 30a:	87 b9       	out	0x07, r24	; 7
	LCD_Data_Dir = 0xFF;							/* Make LCD data port direction as o/p */
 30c:	84 b9       	out	0x04, r24	; 4
 30e:	8f e3       	ldi	r24, 0x3F	; 63
 310:	9c e9       	ldi	r25, 0x9C	; 156
 312:	01 97       	sbiw	r24, 0x01	; 1
 314:	f1 f7       	brne	.-4      	; 0x312 <LCD_Init+0xa>
 316:	00 c0       	rjmp	.+0      	; 0x318 <LCD_Init+0x10>
 318:	00 00       	nop
	
	_delay_ms(20);									/* LCD Initialization time must to get things ready should always >15ms */
	LCD_Command (0x38);								/* Initialization of 16X2 LCD in 8bit mode */
 31a:	88 e3       	ldi	r24, 0x38	; 56
 31c:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LCD_Command>
	LCD_Command (0x01);								/* Clear LCD */
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LCD_Command>
	LCD_Command (0x0C);								/* Cursor OFF */
 326:	8c e0       	ldi	r24, 0x0C	; 12
 328:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LCD_Command>
	LCD_Command (0x80);								/* 8 is for first line and 0 is for 0th position */
 32c:	80 e8       	ldi	r24, 0x80	; 128
 32e:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LCD_Command>
 332:	08 95       	ret

00000334 <_exit>:
 334:	f8 94       	cli

00000336 <__stop_program>:
 336:	ff cf       	rjmp	.-2      	; 0x336 <__stop_program>
