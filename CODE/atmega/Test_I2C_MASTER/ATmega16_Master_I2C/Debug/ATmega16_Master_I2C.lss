
ATmega16_Master_I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000194  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000218  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a1c  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007b6  00000000  00000000  00000d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000645  00000000  00000000  000014c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000128  00000000  00000000  00001b08  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000537  00000000  00000000  00001c30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002f2  00000000  00000000  00002167  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00002459  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4a 00 	call	0x94	; 0x94 <main>
  78:	0c 94 c8 00 	jmp	0x190	; 0x190 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <initLED>:
#define LED_PIN PB0 // Utilisez la broche PB0 pour la LED
#define SENSOR_PIN PC0 // Utilisez la broche PC0 pour le capteur de fenêtre

void initLED() {
	// Configure la broche de la LED comme sortie
	DDRB |= (1 << LED_PIN);
  80:	20 9a       	sbi	0x04, 0	; 4
  82:	08 95       	ret

00000084 <isWindowOpen>:
}

int isWindowOpen() {
	// Lisez l'état du capteur de fenêtre (ouvert ou fermé)
	if (PINC & (1 << SENSOR_PIN)) {
  84:	86 b1       	in	r24, 0x06	; 6
		return 1; // Fenêtre ouverte
		} else {
		return 0; // Fenêtre fermée
	}
}
  86:	81 70       	andi	r24, 0x01	; 1
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	08 95       	ret

0000008c <turnOnLED>:

void turnOnLED() {
	// Allume la LED en mettant la broche à l'état bas (0)
	PORTB &= ~(1 << LED_PIN);
  8c:	28 98       	cbi	0x05, 0	; 5
  8e:	08 95       	ret

00000090 <turnOffLED>:
}

void turnOffLED() {
	// Éteint la LED en mettant la broche à l'état haut (1)
	PORTB |= (1 << LED_PIN);
  90:	28 9a       	sbi	0x05, 0	; 5
  92:	08 95       	ret

00000094 <main>:
}

int main(void) {
	char dataToSend = 'A'; // Donnée à envoyer

	I2C_Init();                         /* Initialize I2C */
  94:	0e 94 7c 00 	call	0xf8	; 0xf8 <I2C_Init>
	initLED();                          // Initialise la LED
  98:	0e 94 40 00 	call	0x80	; 0x80 <initLED>

	// Configure la broche du capteur de fenêtre comme entrée
	DDRC &= ~(1 << SENSOR_PIN);
  9c:	38 98       	cbi	0x07, 0	; 7
	PORTC |= (1 << SENSOR_PIN); // Activer la résistance de rappel interne
  9e:	40 9a       	sbi	0x08, 0	; 8
	// Éteint la LED en mettant la broche à l'état haut (1)
	PORTB |= (1 << LED_PIN);
}

int main(void) {
	char dataToSend = 'A'; // Donnée à envoyer
  a0:	c1 e4       	ldi	r28, 0x41	; 65
	DDRC &= ~(1 << SENSOR_PIN);
	PORTC |= (1 << SENSOR_PIN); // Activer la résistance de rappel interne

	while (1) {
		// Vérifiez l'état du capteur de fenêtre
		if (isWindowOpen()) {
  a2:	0e 94 42 00 	call	0x84	; 0x84 <isWindowOpen>
  a6:	89 2b       	or	r24, r25
  a8:	e9 f0       	breq	.+58     	; 0xe4 <main+0x50>
			// Envoie la donnée via I2C
			I2C_Start(EEPROM_Write_Addess); /* Start I2C with device write address */
  aa:	80 e2       	ldi	r24, 0x20	; 32
  ac:	0e 94 82 00 	call	0x104	; 0x104 <I2C_Start>
			I2C_Write(0x00);               /* Write start memory address for data write */
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	0e 94 b1 00 	call	0x162	; 0x162 <I2C_Write>
			I2C_Write(dataToSend);         /* Envoie la donnée */
  b6:	8c 2f       	mov	r24, r28
  b8:	0e 94 b1 00 	call	0x162	; 0x162 <I2C_Write>
			I2C_Stop();                    /* Stop I2C */
  bc:	0e 94 a8 00 	call	0x150	; 0x150 <I2C_Stop>

			// Inverse la donnée pour l'envoi suivant
			if (dataToSend == 'A') {
  c0:	c1 34       	cpi	r28, 0x41	; 65
  c2:	11 f0       	breq	.+4      	; 0xc8 <main+0x34>
				dataToSend = 'B';
				} else {
				dataToSend = 'A';
  c4:	c1 e4       	ldi	r28, 0x41	; 65
  c6:	01 c0       	rjmp	.+2      	; 0xca <main+0x36>
			I2C_Write(dataToSend);         /* Envoie la donnée */
			I2C_Stop();                    /* Stop I2C */

			// Inverse la donnée pour l'envoi suivant
			if (dataToSend == 'A') {
				dataToSend = 'B';
  c8:	c2 e4       	ldi	r28, 0x42	; 66
				} else {
				dataToSend = 'A';
			}

			// Allume la LED pendant une courte période
			turnOnLED();
  ca:	0e 94 46 00 	call	0x8c	; 0x8c <turnOnLED>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	2f ef       	ldi	r18, 0xFF	; 255
  d0:	80 e7       	ldi	r24, 0x70	; 112
  d2:	92 e0       	ldi	r25, 0x02	; 2
  d4:	21 50       	subi	r18, 0x01	; 1
  d6:	80 40       	sbci	r24, 0x00	; 0
  d8:	90 40       	sbci	r25, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <main+0x40>
  dc:	00 c0       	rjmp	.+0      	; 0xde <main+0x4a>
  de:	00 00       	nop
			_delay_ms(100);
			turnOffLED();
  e0:	0e 94 48 00 	call	0x90	; 0x90 <turnOffLED>
  e4:	2f ef       	ldi	r18, 0xFF	; 255
  e6:	89 e6       	ldi	r24, 0x69	; 105
  e8:	98 e1       	ldi	r25, 0x18	; 24
  ea:	21 50       	subi	r18, 0x01	; 1
  ec:	80 40       	sbci	r24, 0x00	; 0
  ee:	90 40       	sbci	r25, 0x00	; 0
  f0:	e1 f7       	brne	.-8      	; 0xea <main+0x56>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <main+0x60>
  f4:	00 00       	nop
  f6:	d5 cf       	rjmp	.-86     	; 0xa2 <main+0xe>

000000f8 <I2C_Init>:
  f8:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  fc:	80 e2       	ldi	r24, 0x20	; 32
  fe:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 102:	08 95       	ret

00000104 <I2C_Start>:
 104:	94 ea       	ldi	r25, 0xA4	; 164
 106:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 10a:	ec eb       	ldi	r30, 0xBC	; 188
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	90 81       	ld	r25, Z
 110:	99 23       	and	r25, r25
 112:	ec f7       	brge	.-6      	; 0x10e <I2C_Start+0xa>
 114:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 118:	98 7f       	andi	r25, 0xF8	; 248
 11a:	98 30       	cpi	r25, 0x08	; 8
 11c:	99 f4       	brne	.+38     	; 0x144 <I2C_Start+0x40>
 11e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 122:	84 e8       	ldi	r24, 0x84	; 132
 124:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 128:	ec eb       	ldi	r30, 0xBC	; 188
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	88 23       	and	r24, r24
 130:	ec f7       	brge	.-6      	; 0x12c <I2C_Start+0x28>
 132:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 136:	88 7f       	andi	r24, 0xF8	; 248
 138:	88 31       	cpi	r24, 0x18	; 24
 13a:	31 f0       	breq	.+12     	; 0x148 <I2C_Start+0x44>
 13c:	80 32       	cpi	r24, 0x20	; 32
 13e:	31 f0       	breq	.+12     	; 0x14c <I2C_Start+0x48>
 140:	83 e0       	ldi	r24, 0x03	; 3
 142:	08 95       	ret
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	08 95       	ret
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	08 95       	ret
 14c:	82 e0       	ldi	r24, 0x02	; 2
 14e:	08 95       	ret

00000150 <I2C_Stop>:
 150:	84 e9       	ldi	r24, 0x94	; 148
 152:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 156:	ec eb       	ldi	r30, 0xBC	; 188
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	84 fd       	sbrc	r24, 4
 15e:	fd cf       	rjmp	.-6      	; 0x15a <I2C_Stop+0xa>
 160:	08 95       	ret

00000162 <I2C_Write>:
 162:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 166:	84 e8       	ldi	r24, 0x84	; 132
 168:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 16c:	ec eb       	ldi	r30, 0xBC	; 188
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	80 81       	ld	r24, Z
 172:	88 23       	and	r24, r24
 174:	ec f7       	brge	.-6      	; 0x170 <I2C_Write+0xe>
 176:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 17a:	88 7f       	andi	r24, 0xF8	; 248
 17c:	88 32       	cpi	r24, 0x28	; 40
 17e:	21 f0       	breq	.+8      	; 0x188 <I2C_Write+0x26>
 180:	80 33       	cpi	r24, 0x30	; 48
 182:	21 f0       	breq	.+8      	; 0x18c <I2C_Write+0x2a>
 184:	82 e0       	ldi	r24, 0x02	; 2
 186:	08 95       	ret
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	08 95       	ret
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	08 95       	ret

00000190 <_exit>:
 190:	f8 94       	cli

00000192 <__stop_program>:
 192:	ff cf       	rjmp	.-2      	; 0x192 <__stop_program>
