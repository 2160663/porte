
spislave2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000126  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000126  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000077f  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ba  00000000  00000000  00000943  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a5  00000000  00000000  00000ffd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000012a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000041e  00000000  00000000  000012f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000008d  00000000  00000000  00001716  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000017a3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4c 00 	call	0x98	; 0x98 <main>
  78:	0c 94 67 00 	jmp	0xce	; 0xce <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <_Z13SPI_SlaveInitv>:
#include <avr/sfr_defs.h>

void SPI_SlaveInit(void)
{
	/* Set MISO output, all others input */
	DDRB |= (1<<PB4);
  80:	84 b1       	in	r24, 0x04	; 4
  82:	80 61       	ori	r24, 0x10	; 16
  84:	84 b9       	out	0x04, r24	; 4
	/* Enable SPI */
	SPCR |= (1<<SPE);
  86:	8c b5       	in	r24, 0x2c	; 44
  88:	80 64       	ori	r24, 0x40	; 64
  8a:	8c bd       	out	0x2c, r24	; 44
  8c:	08 95       	ret

0000008e <_Z16SPI_SlaveReceivev>:
}
char SPI_SlaveReceive(void)
{
	/* Wait for reception complete */
	while(!(SPSR & (1<<SPIF)))
  8e:	0d b4       	in	r0, 0x2d	; 45
  90:	07 fe       	sbrs	r0, 7
  92:	fd cf       	rjmp	.-6      	; 0x8e <_Z16SPI_SlaveReceivev>
	;
	/* Return Data Register */
	return SPDR;
  94:	8e b5       	in	r24, 0x2e	; 46
}
  96:	08 95       	ret

00000098 <main>:

int main(void)
{
  98:	cf 93       	push	r28
  9a:	df 93       	push	r29
  9c:	1f 92       	push	r1
  9e:	cd b7       	in	r28, 0x3d	; 61
  a0:	de b7       	in	r29, 0x3e	; 62
	/* Replace with your application code */
	uint8_t valeur;
	DDRB =0xFF;
  a2:	8f ef       	ldi	r24, 0xFF	; 255
  a4:	84 b9       	out	0x04, r24	; 4
	SPI_SlaveInit();
  a6:	0e 94 40 00 	call	0x80	; 0x80 <_Z13SPI_SlaveInitv>
	
	while (1)
	{
		valeur=SPI_SlaveReceive();//lire la donnees du MASTER
  aa:	0e 94 47 00 	call	0x8e	; 0x8e <_Z16SPI_SlaveReceivev>
  ae:	89 83       	std	Y+1, r24	; 0x01
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b0:	8d e0       	ldi	r24, 0x0D	; 13
  b2:	8a 95       	dec	r24
  b4:	f1 f7       	brne	.-4      	; 0xb2 <main+0x1a>
  b6:	00 00       	nop
		_delay_us(5);
		
		//tester le bit 0 de valeur
		if (bit_is_clear(valeur,0) ) {
  b8:	89 81       	ldd	r24, Y+1	; 0x01
  ba:	80 fd       	sbrc	r24, 0
  bc:	04 c0       	rjmp	.+8      	; 0xc6 <main+0x2e>
			PORTB |=(1<<PB0); //bouton sur PC0 du Master  appuyé
  be:	85 b1       	in	r24, 0x05	; 5
  c0:	81 60       	ori	r24, 0x01	; 1
  c2:	85 b9       	out	0x05, r24	; 5
  c4:	f2 cf       	rjmp	.-28     	; 0xaa <main+0x12>
		}
		else{
			
			PORTB &=~(1<<PB0); //bouton sur PC0 du Master non appuyé
  c6:	85 b1       	in	r24, 0x05	; 5
  c8:	8e 7f       	andi	r24, 0xFE	; 254
  ca:	85 b9       	out	0x05, r24	; 5
  cc:	ee cf       	rjmp	.-36     	; 0xaa <main+0x12>

000000ce <_exit>:
  ce:	f8 94       	cli

000000d0 <__stop_program>:
  d0:	ff cf       	rjmp	.-2      	; 0xd0 <__stop_program>
