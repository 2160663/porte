
masteri2c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000013c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000013c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000016c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000741  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000066c  00000000  00000000  00000929  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000291  00000000  00000000  00000f95  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001228  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f2  00000000  00000000  0000128c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000002d  00000000  00000000  0000167e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000016ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  78:	0c 94 72 00 	jmp	0xe4	; 0xe4 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <_Z7initI2Cv>:
#define BAUD 9600
#define TWI_FREQ 100000 // Fréquence de l'I2C (100 kHz dans cet exemple)

void initI2C() {
	// Initialisation de la vitesse de transmission de l'I2C
	TWSR = 0;
  80:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
  84:	88 e4       	ldi	r24, 0x48	; 72
  86:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	
	// Activer l'I2C
	TWCR = (1 << TWEN);
  8a:	84 e0       	ldi	r24, 0x04	; 4
  8c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  90:	08 95       	ret

00000092 <_Z9I2C_startv>:
}

void I2C_start() {
	// Envoyer un signal de démarrage
	TWCR = (1 << TWSTA) | (1 << TWEN) | (1 << TWINT);
  92:	84 ea       	ldi	r24, 0xA4	; 164
  94:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	// Attendre que l'opération soit terminée
	while (!(TWCR & (1 << TWINT)));
  98:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  9c:	88 23       	and	r24, r24
  9e:	e4 f7       	brge	.-8      	; 0x98 <_Z9I2C_startv+0x6>
}
  a0:	08 95       	ret

000000a2 <_Z8I2C_stopv>:

void I2C_stop() {
	// Envoyer un signal d'arrêt
	TWCR = (1 << TWSTO) | (1 << TWINT) | (1 << TWEN);
  a2:	84 e9       	ldi	r24, 0x94	; 148
  a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  a8:	08 95       	ret

000000aa <_Z9I2C_writeh>:
}

void I2C_write(uint8_t data) {
	// Charger les données dans le registre de données
	TWDR = data;
  aa:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	
	// Lancer la transmission
	TWCR = (1 << TWEN) | (1 << TWINT);
  ae:	84 e8       	ldi	r24, 0x84	; 132
  b0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	// Attendre que l'opération soit terminée
	while (!(TWCR & (1 << TWINT)));
  b4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  b8:	88 23       	and	r24, r24
  ba:	e4 f7       	brge	.-8      	; 0xb4 <_Z9I2C_writeh+0xa>
}
  bc:	08 95       	ret

000000be <main>:

int main() {
	// Initialize I2C
	initI2C();
  be:	0e 94 40 00 	call	0x80	; 0x80 <_Z7initI2Cv>
	
	int fenetreouvert = 0;
	
	// Configure PD2 as an input
	CLEAR_BIT(DDRD, PD2); // Clear PD2 to set it as an input
  c2:	8a b1       	in	r24, 0x0a	; 10
  c4:	8b 7f       	andi	r24, 0xFB	; 251
  c6:	8a b9       	out	0x0a, r24	; 10
	
	while (1) {
		// Clear PD2 (set it low)
		CLEAR_BIT(PORTD, PD2);
  c8:	8b b1       	in	r24, 0x0b	; 11
  ca:	8b 7f       	andi	r24, 0xFB	; 251
  cc:	8b b9       	out	0x0b, r24	; 11
		
		// Commencer la communication I2C en envoyant l'adresse de l'esclave avec le bit R/W mis à zéro (écriture)
		I2C_start();
  ce:	0e 94 49 00 	call	0x92	; 0x92 <_Z9I2C_startv>
		I2C_write(0x10); // Adresse de l'esclave
  d2:	80 e1       	ldi	r24, 0x10	; 16
  d4:	0e 94 55 00 	call	0xaa	; 0xaa <_Z9I2C_writeh>

		// Envoyer des données à l'esclave (fenetreouvert)
		I2C_write(fenetreouvert);
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	0e 94 55 00 	call	0xaa	; 0xaa <_Z9I2C_writeh>

		// Terminer la communication I2C
		I2C_stop();
  de:	0e 94 51 00 	call	0xa2	; 0xa2 <_Z8I2C_stopv>
  e2:	f2 cf       	rjmp	.-28     	; 0xc8 <main+0xa>

000000e4 <_exit>:
  e4:	f8 94       	cli

000000e6 <__stop_program>:
  e6:	ff cf       	rjmp	.-2      	; 0xe6 <__stop_program>
