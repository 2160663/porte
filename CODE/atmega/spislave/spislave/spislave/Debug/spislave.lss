
spislave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000112  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000be  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000112  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000144  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006e1  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000064f  00000000  00000000  00000895  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000023c  00000000  00000000  00000ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001120  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c9  00000000  00000000  00001164  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000001e  00000000  00000000  0000152d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000154b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <_Z13SPI_SlaveInitv>:
#define SLAVE_ADDRESS 0x02

void SPI_SlaveInit(void)
{
	/* Configure la broche MISO (PB4) en tant que sortie */
	DDRB |= (1 << PB4);
  80:	84 b1       	in	r24, 0x04	; 4
  82:	80 61       	ori	r24, 0x10	; 16
  84:	84 b9       	out	0x04, r24	; 4

	/* Active le SPI en mode esclave */
	SPCR = (1 << SPE);
  86:	80 e4       	ldi	r24, 0x40	; 64
  88:	8c bd       	out	0x2c, r24	; 44
  8a:	08 95       	ret

0000008c <_Z11SPI_Receivev>:
}

uint8_t SPI_Receive(void)
{
	/* Attendre la réception de données via SPI */
	while (!(SPSR & (1 << SPIF)));
  8c:	0d b4       	in	r0, 0x2d	; 45
  8e:	07 fe       	sbrs	r0, 7
  90:	fd cf       	rjmp	.-6      	; 0x8c <_Z11SPI_Receivev>

	/* Retourner les données reçues */
	return SPDR;
  92:	8e b5       	in	r24, 0x2e	; 46
}
  94:	08 95       	ret

00000096 <main>:

int main(void)
{
	SPI_SlaveInit();
  96:	0e 94 40 00 	call	0x80	; 0x80 <_Z13SPI_SlaveInitv>

	while (1)
	{
		// Attendre la sélection de l'esclave par le maître
		while (!(PINB & (1 << PB2))) {}
  9a:	1a 9b       	sbis	0x03, 2	; 3
  9c:	fe cf       	rjmp	.-4      	; 0x9a <main+0x4>

		// Recevoir des données du maître via SPI
		uint8_t receivedData = SPI_Receive();
  9e:	0e 94 46 00 	call	0x8c	; 0x8c <_Z11SPI_Receivev>

		// Traiter les données reçues (exemple : allumer ou éteindre une LED)
		if (receivedData == 0x01)
  a2:	81 30       	cpi	r24, 0x01	; 1
  a4:	21 f4       	brne	.+8      	; 0xae <main+0x18>
		{
			// Allumer une LED connectée à la broche PC0 (exemple)
			PORTC |= (1 << PC0);
  a6:	88 b1       	in	r24, 0x08	; 8
  a8:	81 60       	ori	r24, 0x01	; 1
  aa:	88 b9       	out	0x08, r24	; 8
  ac:	03 c0       	rjmp	.+6      	; 0xb4 <main+0x1e>
		}
		else
		{
			// Éteindre la LED
			PORTC &= ~(1 << PC0);
  ae:	88 b1       	in	r24, 0x08	; 8
  b0:	8e 7f       	andi	r24, 0xFE	; 254
  b2:	88 b9       	out	0x08, r24	; 8
		}

		// Désélectionner l'esclave
		while (PINB & (1 << PB2)) {}
  b4:	1a 99       	sbic	0x03, 2	; 3
  b6:	fe cf       	rjmp	.-4      	; 0xb4 <main+0x1e>
  b8:	f0 cf       	rjmp	.-32     	; 0x9a <main+0x4>

000000ba <_exit>:
  ba:	f8 94       	cli

000000bc <__stop_program>:
  bc:	ff cf       	rjmp	.-2      	; 0xbc <__stop_program>
