
spimaster1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000156  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000102  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000156  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000188  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000852  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ed  00000000  00000000  00000a46  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f9  00000000  00000000  00001133  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  0000142c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000437  00000000  00000000  00001470  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000114  00000000  00000000  000018a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000019bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4c 00 	call	0x98	; 0x98 <main>
  78:	0c 94 7f 00 	jmp	0xfe	; 0xfe <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <_Z14SPI_MasterInitv>:
#include <util/delay.h>

void SPI_MasterInit(void)
{
	/* Set MOSI and SCK output SS,  */
	DDRB |= (1<<PB3)|(1<<PB5)|(1<<PB1)|(1<<PB2);
  80:	84 b1       	in	r24, 0x04	; 4
  82:	8e 62       	ori	r24, 0x2E	; 46
  84:	84 b9       	out	0x04, r24	; 4
	/* Enable SPI, Master, set clock rate fck/64 */
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR1);
  86:	8c b5       	in	r24, 0x2c	; 44
  88:	82 65       	ori	r24, 0x52	; 82
  8a:	8c bd       	out	0x2c, r24	; 44
  8c:	08 95       	ret

0000008e <_Z18SPI_MasterTransmitc>:
}
void SPI_MasterTransmit(char cData)
{
	/* Start transmission */
	SPDR = cData;
  8e:	8e bd       	out	0x2e, r24	; 46
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
  90:	0d b4       	in	r0, 0x2d	; 45
  92:	07 fe       	sbrs	r0, 7
  94:	fd cf       	rjmp	.-6      	; 0x90 <_Z18SPI_MasterTransmitc+0x2>
}
  96:	08 95       	ret

00000098 <main>:

int main(void)
{   uint8_t donnees;
	//Bouton Poussoir sur PC0, Activer résistance de Rappel
	PORTB |=(1<<PB1);
  98:	85 b1       	in	r24, 0x05	; 5
  9a:	82 60       	ori	r24, 0x02	; 2
  9c:	85 b9       	out	0x05, r24	; 5
	PORTB |=(1<<PB2);
  9e:	85 b1       	in	r24, 0x05	; 5
  a0:	84 60       	ori	r24, 0x04	; 4
  a2:	85 b9       	out	0x05, r24	; 5
	SPI_MasterInit();//Initialisation SPI Master
  a4:	0e 94 40 00 	call	0x80	; 0x80 <_Z14SPI_MasterInitv>
	
	PORTB|=(1<<PB1); //SS=1
  a8:	85 b1       	in	r24, 0x05	; 5
  aa:	82 60       	ori	r24, 0x02	; 2
  ac:	85 b9       	out	0x05, r24	; 5
	while (1)
	
	{
		//lire l'etat du bouton poussoir
		
		if (bit_is_clear(PINB,PB1))
  ae:	19 99       	sbic	0x03, 1	; 3
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <main+0x1e>
		donnees=0x01;//si bouton appuyé envoyé 01
  b2:	c1 e0       	ldi	r28, 0x01	; 1
  b4:	01 c0       	rjmp	.+2      	; 0xb8 <main+0x20>
		else
		donnees=0x00;//si non envoyé 00
  b6:	c0 e0       	ldi	r28, 0x00	; 0
		
		PORTB &= ~(1<<PB1);//Activé Slave SS=0
  b8:	85 b1       	in	r24, 0x05	; 5
  ba:	8d 7f       	andi	r24, 0xFD	; 253
  bc:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	8d e0       	ldi	r24, 0x0D	; 13
  c0:	8a 95       	dec	r24
  c2:	f1 f7       	brne	.-4      	; 0xc0 <main+0x28>
  c4:	00 00       	nop
		_delay_us(5);
		SPI_MasterTransmit(donnees); //Transmettre la donnee
  c6:	8c 2f       	mov	r24, r28
  c8:	0e 94 47 00 	call	0x8e	; 0x8e <_Z18SPI_MasterTransmitc>
  cc:	8d e0       	ldi	r24, 0x0D	; 13
  ce:	8a 95       	dec	r24
  d0:	f1 f7       	brne	.-4      	; 0xce <main+0x36>
  d2:	00 00       	nop
		_delay_us(5);
		
		PORTB|=(1<<PB1);//Désactivé Slave SS=1
  d4:	85 b1       	in	r24, 0x05	; 5
  d6:	82 60       	ori	r24, 0x02	; 2
  d8:	85 b9       	out	0x05, r24	; 5
		
		
		
		
		
		PORTB &= ~(1<<PB2);//Activé Slave SS=0
  da:	85 b1       	in	r24, 0x05	; 5
  dc:	8b 7f       	andi	r24, 0xFB	; 251
  de:	85 b9       	out	0x05, r24	; 5
  e0:	8d e0       	ldi	r24, 0x0D	; 13
  e2:	8a 95       	dec	r24
  e4:	f1 f7       	brne	.-4      	; 0xe2 <main+0x4a>
  e6:	00 00       	nop
		_delay_us(5);
		SPI_MasterTransmit(donnees); //Transmettre la donnee
  e8:	8c 2f       	mov	r24, r28
  ea:	0e 94 47 00 	call	0x8e	; 0x8e <_Z18SPI_MasterTransmitc>
  ee:	8d e0       	ldi	r24, 0x0D	; 13
  f0:	8a 95       	dec	r24
  f2:	f1 f7       	brne	.-4      	; 0xf0 <main+0x58>
  f4:	00 00       	nop
		_delay_us(5);
		
		PORTB|=(1<<PB2);//Désactivé Slave SS=1
  f6:	85 b1       	in	r24, 0x05	; 5
  f8:	84 60       	ori	r24, 0x04	; 4
  fa:	85 b9       	out	0x05, r24	; 5
	PORTB |=(1<<PB2);
	SPI_MasterInit();//Initialisation SPI Master
	
	PORTB|=(1<<PB1); //SS=1
	
	while (1)
  fc:	d8 cf       	rjmp	.-80     	; 0xae <main+0x16>

000000fe <_exit>:
  fe:	f8 94       	cli

00000100 <__stop_program>:
 100:	ff cf       	rjmp	.-2      	; 0x100 <__stop_program>
